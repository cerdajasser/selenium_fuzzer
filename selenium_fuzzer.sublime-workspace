{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "README",
			"settings":
			{
				"buffer_size": 4558,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAABw8AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					11,
					"left_delete",
					null,
					"CwAAANMAAAAAAAAA0wAAAAAAAAABAAAAZdIAAAAAAAAA0gAAAAAAAAABAAAAbdEAAAAAAAAA0QAAAAAAAAABAAAAYdAAAAAAAAAA0AAAAAAAAAABAAAAbs8AAAAAAAAAzwAAAAAAAAABAAAAcs4AAAAAAAAAzgAAAAAAAAABAAAAZc0AAAAAAAAAzQAAAAAAAAABAAAAc8wAAAAAAAAAzAAAAAAAAAABAAAAdcsAAAAAAAAAywAAAAAAAAABAAAAcsoAAAAAAAAAygAAAAAAAAABAAAAdckAAAAAAAAAyQAAAAAAAAABAAAAbw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUAAAAAAAAANQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAMkAAAAAAAAAygAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					2,
					"left_delete",
					null,
					"AgAAAMkAAAAAAAAAyQAAAAAAAAABAAAAY8gAAAAAAAAAyAAAAAAAAAABAAAAeQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "cerdajasser"
					},
					"CwAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAADKAAAAAAAAAMsAAAAAAAAAAAAAAMsAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADNAAAAAAAAAAAAAADNAAAAAAAAAM4AAAAAAAAAAAAAAM4AAAAAAAAAzwAAAAAAAAAAAAAAzwAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANEAAAAAAAAAAAAAANEAAAAAAAAA0gAAAAAAAAAAAAAA0gAAAAAAAADTAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAHcOAAAAAAAAdw4AAAAAAAAXAAAAeW91ci5lbWFpbEBleGFtcGxlLmNvbS4",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACODgAAAAAAAHcOAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "cerdajasser@"
					},
					"DAAAAHcOAAAAAAAAeA4AAAAAAAAAAAAAeA4AAAAAAAB5DgAAAAAAAAAAAAB5DgAAAAAAAHoOAAAAAAAAAAAAAHoOAAAAAAAAew4AAAAAAAAAAAAAew4AAAAAAAB8DgAAAAAAAAAAAAB8DgAAAAAAAH0OAAAAAAAAAAAAAH0OAAAAAAAAfg4AAAAAAAAAAAAAfg4AAAAAAAB/DgAAAAAAAAAAAAB/DgAAAAAAAIAOAAAAAAAAAAAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAAgQ4AAAAAAACCDgAAAAAAAAAAAACCDgAAAAAAAIMOAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3DgAAAAAAAHcOAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "gmail.com"
					},
					"CQAAAIMOAAAAAAAAhA4AAAAAAAAAAAAAhA4AAAAAAACFDgAAAAAAAAAAAACFDgAAAAAAAIYOAAAAAAAAAAAAAIYOAAAAAAAAhw4AAAAAAAAAAAAAhw4AAAAAAACIDgAAAAAAAAAAAACIDgAAAAAAAIkOAAAAAAAAAAAAAIkOAAAAAAAAig4AAAAAAAAAAAAAig4AAAAAAACLDgAAAAAAAAAAAACLDgAAAAAAAIwOAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDDgAAAAAAAIMOAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAEDwAASW5zdGFsbGF0aW9uIGFuZCBVc2FnZSBJbnN0cnVjdGlvbnMgZm9yIFNlbGVuaXVtIEZ1enplcgoKMS4gSW5zdGFsbGF0aW9uIEluc3RydWN0aW9ucwoKU3RlcCAxOiBDbG9uZSB0aGUgUmVwb3NpdG9yeQoKRmlyc3QsIGNsb25lIHRoZSByZXBvc2l0b3J5IHRvIHlvdXIgbG9jYWwgbWFjaGluZToKCiQgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9jZXJkYWphc3Nlci9zZWxlbml1bV9mdXp6ZXIuZ2l0CiQgY2Qgc2VsZW5pdW1fZnV6emVyCgpTdGVwIDI6IENyZWF0ZSBhIFZpcnR1YWwgRW52aXJvbm1lbnQKCkNyZWF0aW5nIGEgdmlydHVhbCBlbnZpcm9ubWVudCBoZWxwcyB0byBrZWVwIGRlcGVuZGVuY2llcyBpc29sYXRlZDoKCiQgcHl0aG9uMyAtbSB2ZW52IHZlbnYKCkFjdGl2YXRlIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50OgoKT24gTGludXgvbWFjT1M6CgokIHNvdXJjZSB2ZW52L2Jpbi9hY3RpdmF0ZQoKT24gV2luZG93czoKCiQgdmVudlxTY3JpcHRzXGFjdGl2YXRlCgpTdGVwIDM6IEluc3RhbGwgRGVwZW5kZW5jaWVzCgpJbnN0YWxsIHRoZSByZXF1aXJlZCBkZXBlbmRlbmNpZXMgbGlzdGVkIGluIHJlcXVpcmVtZW50cy50eHQ6CgokIHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKCk1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCB2ZXJzaW9uIG9mIENocm9tZSBpbnN0YWxsZWQgYW5kIHRoYXQgeW91IGhhdmUgZG93bmxvYWRlZCB0aGUgY29tcGF0aWJsZSBjaHJvbWVkcml2ZXIuIEVuc3VyZSB0aGUgY2hyb21lZHJpdmVyIGV4ZWN1dGFibGUgaXMgYXZhaWxhYmxlIGluIHlvdXIgUEFUSCBvciBzcGVjaWZ5IGl0cyBwYXRoIGluIHRoZSBjb25maWd1cmF0aW9uIChjb25maWcucHkpLgoKMi4gQ29uZmlndXJhdGlvbgoKQ2hyb21lRHJpdmVyIFBhdGg6IFNldCB0aGUgQ0hST01FRFJJVkVSX1BBVEggaW4gc2VsZW5pdW1fZnV6emVyL2NvbmZpZy5weSB0byB0aGUgcGF0aCB3aGVyZSB5b3VyIGNocm9tZWRyaXZlciBpcyBsb2NhdGVkLgoKRW52aXJvbm1lbnQgVmFyaWFibGVzOiBPcHRpb25hbGx5LCB5b3UgY2FuIHNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGNvbmZpZ3VyYXRpb25zLCBsaWtlIExPR19MRVZFTCwgU0VMRU5JVU1fSEVBRExFU1MsIGV0Yy4KCjMuIFJ1bm5pbmcgdGhlIEZ1enplcgoKQWZ0ZXIgY29uZmlndXJpbmcgZXZlcnl0aGluZywgeW91IGNhbiBydW4gdGhlIGZ1enplciB1c2luZyB0aGUgbWFpbiBzY3JpcHQuCgpTdGVwIDE6IFJ1biB0aGUgTWFpbiBTY3JpcHQKClJ1biB0aGUgZnV6emVyIGJ5IGV4ZWN1dGluZyB0aGUgbWFpbi5weSBzY3JpcHQ6CgokIHB5dGhvbiBtYWluLnB5CgpZb3Ugd2lsbCBiZSBwcm9tcHRlZCB0byBlbnRlciB0aGUgVVJMIHRvIGZ1eno6CgpFbnRlciB0aGUgVVJMIHRvIGZ1eno6IGh0dHA6Ly9leGFtcGxlLmNvbQoKVGhlIGZ1enplciB3aWxsIGFuYWx5emUgdGhlIGlucHV0IGZpZWxkcyBvbiB0aGUgcHJvdmlkZWQgVVJMIGFuZCBhbGxvdyB5b3UgdG8gc2VsZWN0IHdoaWNoIGZpZWxkcyB0byBmdXp6LgoKNC4gUnVubmluZyBUZXN0cwoKVG8gdmVyaWZ5IHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBmdXp6ZXIsIHJ1biB0aGUgdW5pdCB0ZXN0cyBwcm92aWRlZCBpbiB0aGUgdGVzdHMvIGRpcmVjdG9yeToKCiQgcHl0aG9uIC1tIHVuaXR0ZXN0IGRpc2NvdmVyIHRlc3RzCgpUaGlzIGNvbW1hbmQgd2lsbCBydW4gYWxsIHRoZSB1bml0IHRlc3RzIHRvIGVuc3VyZSB0aGF0IHRoZSBkaWZmZXJlbnQgY29tcG9uZW50cyBvZiB0aGUgZnV6emVyIHdvcmsgY29ycmVjdGx5LgoKNS4gVXNhZ2UgT3ZlcnZpZXcKCkludGVyYWN0aXZlIEZ1enppbmc6IFRoZSBmdXp6ZXIgbGlzdHMgYWxsIGF2YWlsYWJsZSBpbnB1dCBmaWVsZHMgd2l0aGluIG1hdC1mb3JtLWZpZWxkIGNvbXBvbmVudHMgb24gdGhlIHByb3ZpZGVkIHdlYiBwYWdlLiBZb3UgY2FuIHRoZW4gc2VsZWN0IHdoaWNoIGZpZWxkIHRvIGZ1enouCgpMb2dnaW5nOiBMb2dzIGFyZSBzYXZlZCBpbiBhIGZpbGUgbmFtZWQgc2VsZW5pdW1fZnV6emVyLmxvZy4gVGhlIGxvZ2dpbmcgbGV2ZWwgY2FuIGJlIGNvbmZpZ3VyZWQgaW4gdGhlIGNvbmZpZy5weSBmaWxlIG9yIGJ5IHNldHRpbmcgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgKExPR19MRVZFTCkuCgpTY3JlZW5zaG90czogV2hlbiBlcnJvcnMgb2NjdXIgZHVyaW5nIGZ1enppbmcsIHNjcmVlbnNob3RzIGFyZSBzYXZlZCBpbiB0aGUgcHJvamVjdCBkaXJlY3Rvcnkgd2l0aCBmaWxlbmFtZXMgaW5kaWNhdGluZyB0aGUgZXJyb3IuCgo2LiBOb3RlcyBvbiBEZXBlbmRlbmNpZXMKClRoZSBzY3JpcHQgZGVwZW5kcyBvbiBzZWxlbml1bSBmb3Igd2ViIGF1dG9tYXRpb24uIE1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCB2ZXJzaW9uIGluc3RhbGxlZC4KClRoZSBwcm9qZWN0IHVzZXMgYSBoZWFkbGVzcyBicm93c2VyIGNvbmZpZ3VyYXRpb24gYnkgZGVmYXVsdCBmb3IgcGVyZm9ybWFuY2UuIElmIHlvdSB3YW50IHRvIHNlZSB0aGUgYnJvd3NlciB3aGlsZSB0aGUgZnV6emVyIHJ1bnMsIHNldCBTRUxFTklVTV9IRUFETEVTUyA9IEZhbHNlIGluIHRoZSBjb25maWd1cmF0aW9uLgoKNy4gRXhhbXBsZSBXb3JrZmxvdwoKQWN0aXZhdGUgVmlydHVhbCBFbnZpcm9ubWVudDoKCiQgc291cmNlIHZlbnYvYmluL2FjdGl2YXRlICAjIE9uIFdpbmRvd3M6IHZlbnZcU2NyaXB0c1xhY3RpdmF0ZQoKUnVuIHRoZSBGdXp6ZXI6CgokIHB5dGhvbiBtYWluLnB5CgpGb2xsb3cgUHJvbXB0czoKCkVudGVyIHRoZSBVUkwgdG8gdGVzdC4KClNlbGVjdCB0aGUgaW5wdXQgZmllbGRzIGZvciBmdXp6aW5nLgoKUmV2aWV3IExvZ3MgYW5kIFNjcmVlbnNob3RzOgoKQ2hlY2sgc2VsZW5pdW1fZnV6emVyLmxvZyBmb3IgZGV0YWlsZWQgbG9ncy4KCkxvb2sgYXQgdGhlIHNjcmVlbnNob3RzIHNhdmVkIGluIHRoZSBkaXJlY3RvcnkgaWYgZXJyb3JzIGFyZSBlbmNvdW50ZXJlZC4KCjguIFRyb3VibGVzaG9vdGluZwoKQ2hyb21lRHJpdmVyIElzc3VlczogRW5zdXJlIHRoYXQgdGhlIHZlcnNpb24gb2YgY2hyb21lZHJpdmVyIG1hdGNoZXMgdGhlIHZlcnNpb24gb2YgQ2hyb21lIHlvdSBoYXZlIGluc3RhbGxlZC4KCkVsZW1lbnQgTm90IEZvdW5kOiBJZiBpbnB1dCBmaWVsZHMgYXJlIG5vdCBmb3VuZCwgZW5zdXJlIHRoYXQgdGhlIHdlYnBhZ2UgaXMgZnVsbHkgbG9hZGVkIGFuZCB2aXNpYmxlIGVsZW1lbnRzIGFyZSBwcmVzZW50LgoKVmlydHVhbCBFbnZpcm9ubWVudCBJc3N1ZXM6IE1ha2Ugc3VyZSB5b3UgaGF2ZSBhY3RpdmF0ZWQgdGhlIHZpcnR1YWwgZW52aXJvbm1lbnQgYmVmb3JlIHJ1bm5pbmcgdGhlIHNjcmlwdC4KCjkuIFVuaW5zdGFsbGluZwoKVG8gdW5pbnN0YWxsIHRoZSBwcm9qZWN0LCBzaW1wbHkgZGVhY3RpdmF0ZSB0aGUgdmlydHVhbCBlbnZpcm9ubWVudCBhbmQgcmVtb3ZlIHRoZSBwcm9qZWN0IGZvbGRlcjoKCiQgZGVhY3RpdmF0ZSAgIyBEZWFjdGl2YXRlIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50CiQgY2QgLi4KJCBybSAtcmYgc2VsZW5pdW1fZnV6emVyICAjIERlbGV0ZSB0aGUgcHJvamVjdCBmb2xkZXIKCjEwLiBDb250YWN0CgpGb3IgYW55IGlzc3VlcyBvciBxdWVzdGlvbnMsIGZlZWwgZnJlZSB0byBjcmVhdGUgYW4gaXNzdWUgb24gdGhlIEdpdEh1YiByZXBvc2l0b3J5IG9yIGNvbnRhY3QgdGhlIGF1dGhvciB2aWEgZW1haWw6IGNlcmRhamFzc2VyQGdtYWlsLmNvbQoKSGFwcHkgZnV6emluZyEgRW5zdXJlIHlvdSBvbmx5IHRlc3Qgb24gd2Vic2l0ZXMgeW91IGhhdmUgcGVybWlzc2lvbiB0byB0ZXN0LCBhcyB1bmF1dGhvcml6ZWQgdGVzdGluZyBtYXkgYmUgaWxsZWdhbC4KCg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAzhEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "setup.py",
			"settings":
			{
				"buffer_size": 667,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAmgIAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					9,
					"left_delete",
					null,
					"CQAAAHkAAAAAAAAAeQAAAAAAAAABAAAAZXgAAAAAAAAAeAAAAAAAAAABAAAAbXcAAAAAAAAAdwAAAAAAAAABAAAAYXYAAAAAAAAAdgAAAAAAAAABAAAATnUAAAAAAAAAdQAAAAAAAAABAAAAIHQAAAAAAAAAdAAAAAAAAAABAAAAcnMAAAAAAAAAcwAAAAAAAAABAAAAdXIAAAAAAAAAcgAAAAAAAAABAAAAb3EAAAAAAAAAcQAAAAAAAAABAAAAWQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "Jasser"
					},
					"BgAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " Cerda"
					},
					"BgAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAdwAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					2,
					"left_delete",
					null,
					"AgAAAJMAAAAAAAAAkwAAAAAAAAAVAAAAb3VyLmVtYWlsQGV4YW1wbGUuY29tkgAAAAAAAACSAAAAAAAAAAEAAAB5",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgAAAAAAAAAkwAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "cerdajasser@"
					},
					"DAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIAAAAAAAAAkgAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "gmail.com"
					},
					"CQAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAKcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4AAAAAAAAAngAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					12,
					"left_delete",
					null,
					"DAAAAJEBAAAAAAAAkQEAAAAAAAABAAAAZZABAAAAAAAAkAEAAAAAAAABAAAAbY8BAAAAAAAAjwEAAAAAAAABAAAAYY4BAAAAAAAAjgEAAAAAAAABAAAAbo0BAAAAAAAAjQEAAAAAAAABAAAAcowBAAAAAAAAjAEAAAAAAAABAAAAZYsBAAAAAAAAiwEAAAAAAAABAAAAc4oBAAAAAAAAigEAAAAAAAABAAAAdYkBAAAAAAAAiQEAAAAAAAABAAAAcogBAAAAAAAAiAEAAAAAAAABAAAAdYcBAAAAAAAAhwEAAAAAAAABAAAAb4YBAAAAAAAAhgEAAAAAAAABAAAAeQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIBAAAAAAAAkgEAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "cerdajasser"
					},
					"CwAAAIYBAAAAAAAAhwEAAAAAAAAAAAAAhwEAAAAAAACIAQAAAAAAAAAAAACIAQAAAAAAAIkBAAAAAAAAAAAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACLAQAAAAAAAAAAAACLAQAAAAAAAIwBAAAAAAAAAAAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACOAQAAAAAAAAAAAACOAQAAAAAAAI8BAAAAAAAAAAAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYBAAAAAAAAhgEAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAF0AAAAAAAAAXQAAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeAAAAAAAAAF4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdAAAAAAAAAF0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAGEAAAAAAAAAYQAAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAAAAAAAAAGIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGEAAAAAAAAAYgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAAAAAAAAAGEAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "requirements.txt",
			"settings":
			{
				"buffer_size": 17,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAEQAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "",
			"file": "main.py",
			"file_size": 5506,
			"file_write_time": 133769786288944386,
			"redo_stack":
			[
				[
					53,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACCFQAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBpbnB1dF9maWVsZHNbaWR4XQogICAgICAgICAgICAgICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnNlbmRfa2V5cyhLZXlzLlRBQikgICMgVHJpZ2dlciBwb3RlbnRpYWwgSmF2YVNjcmlwdCBldmVudHMgYWZ0ZXIgaW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnNlbmRfa2V5cyhLZXlzLkVOVEVSKSAgIyBFeHBsaWNpdGx5IGhpdCBlbnRlciBhZnRlciB0YWJiaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkluc2VydGVkIHBheWxvYWQgJ3twYXlsb2FkfScgaW50byBmaWVsZCB7aWR4fS4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcChhcmdzLmRlbGF5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBWYWxpZGF0ZSB0aGF0IHRoZSBwYXlsb2FkIHdhcyBzdWNjZXNzZnVsbHkgZW50ZXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF92YWx1ZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoInZhbHVlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGVudGVyZWRfdmFsdWUgPT0gcGF5bG9hZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlBheWxvYWQgJ3twYXlsb2FkfScgc3VjY2Vzc2Z1bGx5IGVudGVyZWQgaW50byBmaWVsZCB7aWR4fS4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlBheWxvYWQgJ3twYXlsb2FkfScgY291bGQgbm90IGJlIHZlcmlmaWVkIGluIGZpZWxkIHtpZHh9LiBFbnRlcmVkIHZhbHVlOiAne2VudGVyZWRfdmFsdWV9JyIpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGluc2VydGluZyBwYXlsb2FkIGludG8gZmllbGQge2lkeH06IHtlfSIpCgogICAgICAgICAgICAjIFN1Ym1pdCB0aGUgZm9ybSBleHBsaWNpdGx5CiAgICAgICAgICAgIGZvciBmb3JtIGluIGRyaXZlci5maW5kX2VsZW1lbnRzKEJ5LlRBR19OQU1FLCAiZm9ybSIpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24gPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi8vaW5wdXRbQHR5cGU9J3N1Ym1pdCddIHwgLy9idXR0b25bQHR5cGU9J3N1Ym1pdCddIikKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uLmNsaWNrKCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiQ2xpY2tlZCBzdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICBleGNlcHQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgbm8gc3VibWl0IGJ1dHRvbiwgdHJ5IHNlbmRpbmcgRU5URVIga2V5IHRvIGFueSBpbnB1dCBmaWVsZCBpbiB0aGUgZm9ybQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50ID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLy9pbnB1dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKEtleXMuRU5URVIpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJTZW50IEVOVEVSIGtleSB0byBpbnB1dCBlbGVtZW50IHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBzdWJtaXR0aW5nIGZvcm0gYnkgc2VuZGluZyBFTlRFUiBrZXk6IHtlfSIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgY2xpY2tpbmcgc3VibWl0IGJ1dHRvbjoge2V9IikKCiAgICAgICAgICAgICMgTG9vayBmb3IgdXBkYXRlZCBKYXZhU2NyaXB0IHRleHQgdG8gZGV0ZXJtaW5lIHRoZSByZXN1bHQgb2YgZm9ybSBzdWJtaXNzaW9uCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikgICMgV2FpdCBmb3IgcG90ZW50aWFsIEphdmFTY3JpcHQgdXBkYXRlcwogICAgICAgICAgICBwYWdlX3NvdXJjZSA9IGRyaXZlci5wYWdlX3NvdXJjZQogICAgICAgICAgICBzdWNjZXNzX21lc3NhZ2UgPSAiRm9ybSBzdWJtaXR0ZWQhIE5vIHZhbGlkYXRpb24gZXJyb3JzLiIKICAgICAgICAgICAgaWYgc3VjY2Vzc19tZXNzYWdlIGluIHBhZ2Vfc291cmNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkZvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSB3aXRoIG5vIHZhbGlkYXRpb24gZXJyb3JzLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiRm9ybSBzdWJtaXNzaW9uIG1heSBoYXZlIGVycm9ycyBvciB1bmV4cGVjdGVkIGJlaGF2aW9yLiBQbGVhc2UgcmV2aWV3IHRoZSBwYWdlIGZvciBlcnJvciBtZXNzYWdlcy4iKQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgaW5wdXQoIlByZXNzIEVudGVyIHRvIGNsb3NlIHRoZSBicm93c2VyLi4uIikgICMgS2VlcCB0aGUgYnJvd3NlciBvcGVuIHVudGlsIHVzZXIgaW5wdXQKICAgICAgICBkcml2ZXIucXVpdCgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg",
					"AQAAAAAAAAABAAAAaQwAAAAAAABpDAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "from selenium_fuzzer.fuzzer import Fuzzer"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAuQAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAnAMAAAAAAAAAAAAAnAMAAAAAAACcAwAAAAAAALkAAABmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgoKZGVmIG1haW4oKToKICAgIHVybCA9IGlucHV0KCJFbnRlciB0aGUgVVJMIHRvIGZ1eno6ICIpCiAgICBmdXp6ZXIgPSBGdXp6ZXIodXJsKQogICAgZnV6emVyLnJ1bihkZWxheT0xKQoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACcAwAAaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW1fZnV6emVyLmZ1enplciBpbXBvcnQgRnV6emVyCgoKZGVmIG1haW4oKToKICAgICMgU2V0IHVwIGFyZ3VtZW50IHBhcnNlciBmb3IgY29tbWFuZC1saW5lIG9wdGlvbnMKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJTZWxlbml1bS1iYXNlZCBmdXp6ZXIgZm9yIGlucHV0IGZpZWxkcyBpbiBBbmd1bGFyIE1hdGVyaWFsIGFwcGxpY2F0aW9ucy4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLXVybCIsIHJlcXVpcmVkPVRydWUsIGhlbHA9IlRoZSBVUkwgdG8gZnV6eiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItYXR0ZW1wdHMiLCB0eXBlPWludCwgZGVmYXVsdD0xLCBoZWxwPSJOdW1iZXIgb2YgZnV6eiBhdHRlbXB0cyBwZXIgZmllbGQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlIikKCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgICMgVXBkYXRlIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gYXJndW1lbnRzCiAgICB1cmwgPSBhcmdzLnVybAogICAgYXR0ZW1wdHMgPSBhcmdzLmF0dGVtcHRzCiAgICBkZWxheSA9IGFyZ3MuZGVsYXkKCiAgICAjIEluc3RhbnRpYXRlIHRoZSBmdXp6ZXIgYW5kIHJ1biBpdAogICAgZnV6emVyID0gRnV6emVyKHVybCkKICAgIGZ1enplci5ydW4oZGVsYXk9ZGVsYXksIGF0dGVtcHRzPWF0dGVtcHRzKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwDAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA4AMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADgAwAAaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW1fZnV6emVyLmZ1enplciBpbXBvcnQgRnV6emVyCmZyb20gc2VsZW5pdW1fZnV6emVyLmNvbmZpZyBpbXBvcnQgQ29uZmlnCgoKZGVmIG1haW4oKToKICAgICMgU2V0IHVwIGFyZ3VtZW50IHBhcnNlciBmb3IgY29tbWFuZC1saW5lIG9wdGlvbnMKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJTZWxlbml1bS1iYXNlZCBmdXp6ZXIgZm9yIGlucHV0IGZpZWxkcyBpbiBBbmd1bGFyIE1hdGVyaWFsIGFwcGxpY2F0aW9ucy4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLXVybCIsIHJlcXVpcmVkPVRydWUsIGhlbHA9IlRoZSBVUkwgdG8gZnV6eiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItYXR0ZW1wdHMiLCB0eXBlPWludCwgZGVmYXVsdD0xLCBoZWxwPSJOdW1iZXIgb2YgZnV6eiBhdHRlbXB0cyBwZXIgZmllbGQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlIikKCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgICMgVXBkYXRlIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gYXJndW1lbnRzCiAgICBDb25maWcuU0VMRU5JVU1fSEVBRExFU1MgPSBhcmdzLmhlYWRsZXNzCiAgICB1cmwgPSBhcmdzLnVybAogICAgYXR0ZW1wdHMgPSBhcmdzLmF0dGVtcHRzCiAgICBkZWxheSA9IGFyZ3MuZGVsYXkKCiAgICAjIEluc3RhbnRpYXRlIHRoZSBmdXp6ZXIgYW5kIHJ1biBpdAogICAgZnV6emVyID0gRnV6emVyKHVybCkKICAgIGZ1enplci5ydW4oZGVsYXk9ZGVsYXkpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAA4AMAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA6gIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADqAgAAaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW1fZnV6emVyLmZ1enplciBpbXBvcnQgRnV6emVyCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlNlbGVuaXVtIEZ1enplciBTY3JpcHQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVVJMIHRvIGZ1enoiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1mdXp6LWZpZWxkcyIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IkZ1enogaW5wdXQgZmllbGRzIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tY2xpY2stZWxlbWVudHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJDbGljayB0aHJvdWdoIGNsaWNrYWJsZSBlbGVtZW50cyIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBhY3Rpb25zIGluIHNlY29uZHMiKQoKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgogICAgZnV6emVyID0gRnV6emVyKGFyZ3MudXJsKQoKICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgZnV6emVyLnJ1bl9mdXp6X2ZpZWxkcyhkZWxheT1hcmdzLmRlbGF5KQoKICAgIGlmIGFyZ3MuY2xpY2tfZWxlbWVudHM6CiAgICAgICAgZnV6emVyLnJ1bl9jbGlja19lbGVtZW50cyhkZWxheT1hcmdzLmRlbGF5KQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoCAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAATgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABOAwAAaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW1fZnV6emVyLmZ1enplciBpbXBvcnQgRnV6emVyCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlNlbGVuaXVtIEZ1enplciBTY3JpcHQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVVJMIHRvIGZ1enoiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1mdXp6LWZpZWxkcyIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IkZ1enogaW5wdXQgZmllbGRzIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tY2xpY2stZWxlbWVudHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJDbGljayB0aHJvdWdoIGNsaWNrYWJsZSBlbGVtZW50cyIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBhY3Rpb25zIGluIHNlY29uZHMiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IlJ1biB0aGUgYnJvd3NlciBpbiBoZWFkbGVzcyBtb2RlIikKCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGZ1enplciA9IEZ1enplcihhcmdzLnVybCwgaGVhZGxlc3M9YXJncy5oZWFkbGVzcykKCiAgICBpZiBhcmdzLmZ1enpfZmllbGRzOgogICAgICAgIGZ1enplci5ydW5fZnV6el9maWVsZHMoZGVsYXk9YXJncy5kZWxheSkKCiAgICBpZiBhcmdzLmNsaWNrX2VsZW1lbnRzOgogICAgICAgIGZ1enplci5ydW5fY2xpY2tfZWxlbWVudHMoZGVsYXk9YXJncy5kZWxheSkK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4DAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAXAYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABcBgAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoZXhlY3V0YWJsZV9wYXRoPUNvbmZpZy5DSFJPTUVEUklWRVJfUEFUSCwgb3B0aW9ucz1jaHJvbWVfb3B0aW9ucykKCiAgICB0cnk6CiAgICAgICAgZHJpdmVyLmdldChhcmdzLnVybCkKICAgICAgICBsb2dnZXIuaW5mbyhmIkFjY2Vzc2luZyBVUkw6IHthcmdzLnVybH0iKQoKICAgICAgICBmdXp6ZXIgPSBGdXp6ZXIoZHJpdmVyKQoKICAgICAgICBpZiBhcmdzLmZ1enpfZmllbGRzOgogICAgICAgICAgICBwYXlsb2FkcyA9IGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKQogICAgICAgICAgICBmdXp6ZXIucnVuX2Z1enpfZmllbGRzKHBheWxvYWRzLCBkZWxheT1hcmdzLmRlbGF5KQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgZHJpdmVyLnF1aXQoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAXAYAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAdgYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAB2BgAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZ1enplci5ydW5fZnV6el9maWVsZHMocGF5bG9hZHMsIGRlbGF5PWFyZ3MuZGVsYXkpCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkFuIGVycm9yIG9jY3VycmVkOiB7ZX0iKQogICAgZmluYWxseToKICAgICAgICBkcml2ZXIucXVpdCgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAdgYAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAQAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABACAAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZ1enplci5ydW5fZnV6el9maWVsZHMocGF5bG9hZHMsIGRlbGF5PWFyZ3MuZGVsYXkpCgogICAgICAgICAgICAjIFN1Ym1pdCB0aGUgZm9ybSBieSBzZW5kaW5nIEVOVEVSIGtleQogICAgICAgICAgICBmb3IgaW5wdXRfZWxlbWVudCBpbiBkcml2ZXIuZmluZF9lbGVtZW50c19ieV90YWdfbmFtZSgiaW5wdXQiKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50LnNlbmRfa2V5cyhLZXlzLkVOVEVSKQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJTZW50IEVOVEVSIGtleSB0byBpbnB1dCBlbGVtZW50IHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3Igc2VuZGluZyBFTlRFUiBrZXkgdG8gaW5wdXQgZWxlbWVudDoge2V9IikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpCiAgICBmaW5hbGx5OgogICAgICAgIGRyaXZlci5xdWl0KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAEAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAANwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAA3CwAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZ1enplci5ydW5fZnV6el9maWVsZHMocGF5bG9hZHMsIGRlbGF5PWFyZ3MuZGVsYXkpCgogICAgICAgICAgICAjIFN1Ym1pdCB0aGUgZm9ybSBleHBsaWNpdGx5CiAgICAgICAgICAgIGZvciBmb3JtIGluIGRyaXZlci5maW5kX2VsZW1lbnRzKEJ5LlRBR19OQU1FLCAiZm9ybSIpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24gPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi8vaW5wdXRbQHR5cGU9J3N1Ym1pdCddIHwgLy9idXR0b25bQHR5cGU9J3N1Ym1pdCddIikKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uLmNsaWNrKCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiQ2xpY2tlZCBzdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICBleGNlcHQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgbm8gc3VibWl0IGJ1dHRvbiwgdHJ5IHNlbmRpbmcgRU5URVIga2V5IHRvIGFueSBpbnB1dCBmaWVsZCBpbiB0aGUgZm9ybQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50ID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLy9pbnB1dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKEtleXMuRU5URVIpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJTZW50IEVOVEVSIGtleSB0byBpbnB1dCBlbGVtZW50IHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBzdWJtaXR0aW5nIGZvcm0gYnkgc2VuZGluZyBFTlRFUiBrZXk6IHtlfSIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgY2xpY2tpbmcgc3VibWl0IGJ1dHRvbjoge2V9IikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpCiAgICBmaW5hbGx5OgogICAgICAgIGRyaXZlci5xdWl0KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAADcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAcA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABwDQAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZ1enplci5ydW5fZnV6el9maWVsZHMocGF5bG9hZHMsIGRlbGF5PWFyZ3MuZGVsYXkpCgogICAgICAgICAgICAjIFN1Ym1pdCB0aGUgZm9ybSBleHBsaWNpdGx5CiAgICAgICAgICAgIGZvciBmb3JtIGluIGRyaXZlci5maW5kX2VsZW1lbnRzKEJ5LlRBR19OQU1FLCAiZm9ybSIpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24gPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi8vaW5wdXRbQHR5cGU9J3N1Ym1pdCddIHwgLy9idXR0b25bQHR5cGU9J3N1Ym1pdCddIikKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uLmNsaWNrKCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiQ2xpY2tlZCBzdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICBleGNlcHQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgbm8gc3VibWl0IGJ1dHRvbiwgdHJ5IHNlbmRpbmcgRU5URVIga2V5IHRvIGFueSBpbnB1dCBmaWVsZCBpbiB0aGUgZm9ybQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50ID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLy9pbnB1dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKEtleXMuRU5URVIpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJTZW50IEVOVEVSIGtleSB0byBpbnB1dCBlbGVtZW50IHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBzdWJtaXR0aW5nIGZvcm0gYnkgc2VuZGluZyBFTlRFUiBrZXk6IHtlfSIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgY2xpY2tpbmcgc3VibWl0IGJ1dHRvbjoge2V9IikKCiAgICAgICAgICAgICMgTG9vayBmb3IgdXBkYXRlZCBKYXZhU2NyaXB0IHRleHQgdG8gZGV0ZXJtaW5lIHRoZSByZXN1bHQgb2YgZm9ybSBzdWJtaXNzaW9uCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikgICMgV2FpdCBmb3IgcG90ZW50aWFsIEphdmFTY3JpcHQgdXBkYXRlcwogICAgICAgICAgICBwYWdlX3NvdXJjZSA9IGRyaXZlci5wYWdlX3NvdXJjZQogICAgICAgICAgICBzdWNjZXNzX21lc3NhZ2UgPSAiRm9ybSBzdWJtaXR0ZWQhIE5vIHZhbGlkYXRpb24gZXJyb3JzLiIKICAgICAgICAgICAgaWYgc3VjY2Vzc19tZXNzYWdlIGluIHBhZ2Vfc291cmNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkZvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSB3aXRoIG5vIHZhbGlkYXRpb24gZXJyb3JzLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiRm9ybSBzdWJtaXNzaW9uIG1heSBoYXZlIGVycm9ycyBvciB1bmV4cGVjdGVkIGJlaGF2aW9yLiBQbGVhc2UgcmV2aWV3IHRoZSBwYWdlIGZvciBlcnJvciBtZXNzYWdlcy4iKQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgZHJpdmVyLnF1aXQoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAHANAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA1BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADUEAAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZnV6emVyLmZ1enpfZmllbGQoaW5wdXRfZmllbGRzW2lkeF0sIHBheWxvYWRzLCBkZWxheT1hcmdzLmRlbGF5KQoKICAgICAgICAgICAgIyBTdWJtaXQgdGhlIGZvcm0gZXhwbGljaXRseQogICAgICAgICAgICBmb3IgZm9ybSBpbiBkcml2ZXIuZmluZF9lbGVtZW50cyhCeS5UQUdfTkFNRSwgImZvcm0iKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIvL2lucHV0W0B0eXBlPSdzdWJtaXQnXSB8IC8vYnV0dG9uW0B0eXBlPSdzdWJtaXQnXSIpCiAgICAgICAgICAgICAgICAgICAgc3VibWl0X2J1dHRvbi5jbGljaygpCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkNsaWNrZWQgc3VibWl0IGJ1dHRvbiB0byBzdWJtaXQgZm9ybS4iKQogICAgICAgICAgICAgICAgZXhjZXB0IE5vU3VjaEVsZW1lbnRFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIElmIG5vIHN1Ym1pdCBidXR0b24sIHRyeSBzZW5kaW5nIEVOVEVSIGtleSB0byBhbnkgaW5wdXQgZmllbGQgaW4gdGhlIGZvcm0KICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudCA9IGZvcm0uZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLi8vaW5wdXQiKQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50LnNlbmRfa2V5cyhLZXlzLkVOVEVSKQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiU2VudCBFTlRFUiBrZXkgdG8gaW5wdXQgZWxlbWVudCB0byBzdWJtaXQgZm9ybS4iKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3Igc3VibWl0dGluZyBmb3JtIGJ5IHNlbmRpbmcgRU5URVIga2V5OiB7ZX0iKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGNsaWNraW5nIHN1Ym1pdCBidXR0b246IHtlfSIpCgogICAgICAgICAgICAjIExvb2sgZm9yIHVwZGF0ZWQgSmF2YVNjcmlwdCB0ZXh0IHRvIGRldGVybWluZSB0aGUgcmVzdWx0IG9mIGZvcm0gc3VibWlzc2lvbgogICAgICAgICAgICB0aW1lLnNsZWVwKDIpICAjIFdhaXQgZm9yIHBvdGVudGlhbCBKYXZhU2NyaXB0IHVwZGF0ZXMKICAgICAgICAgICAgcGFnZV9zb3VyY2UgPSBkcml2ZXIucGFnZV9zb3VyY2UKICAgICAgICAgICAgc3VjY2Vzc19tZXNzYWdlID0gIkZvcm0gc3VibWl0dGVkISBObyB2YWxpZGF0aW9uIGVycm9ycy4iCiAgICAgICAgICAgIGlmIHN1Y2Nlc3NfbWVzc2FnZSBpbiBwYWdlX3NvdXJjZToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJGb3JtIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkgd2l0aCBubyB2YWxpZGF0aW9uIGVycm9ycy4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIkZvcm0gc3VibWlzc2lvbiBtYXkgaGF2ZSBlcnJvcnMgb3IgdW5leHBlY3RlZCBiZWhhdmlvci4gUGxlYXNlIHJldmlldyB0aGUgcGFnZSBmb3IgZXJyb3IgbWVzc2FnZXMuIikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpCiAgICBmaW5hbGx5OgogICAgICAgIGRyaXZlci5xdWl0KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAANQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAMxEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAzEQAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZnV6emVyLmZ1enpfZmllbGQoaW5wdXRfZmllbGRzW2lkeF0sIHBheWxvYWRzLCBkZWxheT1hcmdzLmRlbGF5KQoKICAgICAgICAgICAgIyBTdWJtaXQgdGhlIGZvcm0gZXhwbGljaXRseQogICAgICAgICAgICBmb3IgZm9ybSBpbiBkcml2ZXIuZmluZF9lbGVtZW50cyhCeS5UQUdfTkFNRSwgImZvcm0iKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIvL2lucHV0W0B0eXBlPSdzdWJtaXQnXSB8IC8vYnV0dG9uW0B0eXBlPSdzdWJtaXQnXSIpCiAgICAgICAgICAgICAgICAgICAgc3VibWl0X2J1dHRvbi5jbGljaygpCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkNsaWNrZWQgc3VibWl0IGJ1dHRvbiB0byBzdWJtaXQgZm9ybS4iKQogICAgICAgICAgICAgICAgZXhjZXB0IE5vU3VjaEVsZW1lbnRFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIElmIG5vIHN1Ym1pdCBidXR0b24sIHRyeSBzZW5kaW5nIEVOVEVSIGtleSB0byBhbnkgaW5wdXQgZmllbGQgaW4gdGhlIGZvcm0KICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudCA9IGZvcm0uZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLi8vaW5wdXQiKQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50LnNlbmRfa2V5cyhLZXlzLkVOVEVSKQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiU2VudCBFTlRFUiBrZXkgdG8gaW5wdXQgZWxlbWVudCB0byBzdWJtaXQgZm9ybS4iKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3Igc3VibWl0dGluZyBmb3JtIGJ5IHNlbmRpbmcgRU5URVIga2V5OiB7ZX0iKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGNsaWNraW5nIHN1Ym1pdCBidXR0b246IHtlfSIpCgogICAgICAgICAgICAjIExvb2sgZm9yIHVwZGF0ZWQgSmF2YVNjcmlwdCB0ZXh0IHRvIGRldGVybWluZSB0aGUgcmVzdWx0IG9mIGZvcm0gc3VibWlzc2lvbgogICAgICAgICAgICB0aW1lLnNsZWVwKDIpICAjIFdhaXQgZm9yIHBvdGVudGlhbCBKYXZhU2NyaXB0IHVwZGF0ZXMKICAgICAgICAgICAgcGFnZV9zb3VyY2UgPSBkcml2ZXIucGFnZV9zb3VyY2UKICAgICAgICAgICAgc3VjY2Vzc19tZXNzYWdlID0gIkZvcm0gc3VibWl0dGVkISBObyB2YWxpZGF0aW9uIGVycm9ycy4iCiAgICAgICAgICAgIGlmIHN1Y2Nlc3NfbWVzc2FnZSBpbiBwYWdlX3NvdXJjZToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJGb3JtIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkgd2l0aCBubyB2YWxpZGF0aW9uIGVycm9ycy4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIkZvcm0gc3VibWlzc2lvbiBtYXkgaGF2ZSBlcnJvcnMgb3IgdW5leHBlY3RlZCBiZWhhdmlvci4gUGxlYXNlIHJldmlldyB0aGUgcGFnZSBmb3IgZXJyb3IgbWVzc2FnZXMuIikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiQW4gZXJyb3Igb2NjdXJyZWQ6IHtlfSIpCiAgICBmaW5hbGx5OgogICAgICAgIGlucHV0KCJQcmVzcyBFbnRlciB0byBjbG9zZSB0aGUgYnJvd3Nlci4uLiIpICAjIEtlZXAgdGhlIGJyb3dzZXIgb3BlbiB1bnRpbCB1c2VyIGlucHV0CiAgICAgICAgZHJpdmVyLnF1aXQoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAADMRAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAzRIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADNEgAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBpbnB1dF9maWVsZHNbaWR4XQogICAgICAgICAgICAgICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiSW5zZXJ0ZWQgcGF5bG9hZCAne3BheWxvYWR9JyBpbnRvIGZpZWxkIHtpZHh9LiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGFyZ3MuZGVsYXkpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGluc2VydGluZyBwYXlsb2FkIGludG8gZmllbGQge2lkeH06IHtlfSIpCgogICAgICAgICAgICAjIFN1Ym1pdCB0aGUgZm9ybSBleHBsaWNpdGx5CiAgICAgICAgICAgIGZvciBmb3JtIGluIGRyaXZlci5maW5kX2VsZW1lbnRzKEJ5LlRBR19OQU1FLCAiZm9ybSIpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24gPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi8vaW5wdXRbQHR5cGU9J3N1Ym1pdCddIHwgLy9idXR0b25bQHR5cGU9J3N1Ym1pdCddIikKICAgICAgICAgICAgICAgICAgICBzdWJtaXRfYnV0dG9uLmNsaWNrKCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiQ2xpY2tlZCBzdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICBleGNlcHQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgbm8gc3VibWl0IGJ1dHRvbiwgdHJ5IHNlbmRpbmcgRU5URVIga2V5IHRvIGFueSBpbnB1dCBmaWVsZCBpbiB0aGUgZm9ybQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50ID0gZm9ybS5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLy9pbnB1dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKEtleXMuRU5URVIpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJTZW50IEVOVEVSIGtleSB0byBpbnB1dCBlbGVtZW50IHRvIHN1Ym1pdCBmb3JtLiIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBzdWJtaXR0aW5nIGZvcm0gYnkgc2VuZGluZyBFTlRFUiBrZXk6IHtlfSIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgY2xpY2tpbmcgc3VibWl0IGJ1dHRvbjoge2V9IikKCiAgICAgICAgICAgICMgTG9vayBmb3IgdXBkYXRlZCBKYXZhU2NyaXB0IHRleHQgdG8gZGV0ZXJtaW5lIHRoZSByZXN1bHQgb2YgZm9ybSBzdWJtaXNzaW9uCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikgICMgV2FpdCBmb3IgcG90ZW50aWFsIEphdmFTY3JpcHQgdXBkYXRlcwogICAgICAgICAgICBwYWdlX3NvdXJjZSA9IGRyaXZlci5wYWdlX3NvdXJjZQogICAgICAgICAgICBzdWNjZXNzX21lc3NhZ2UgPSAiRm9ybSBzdWJtaXR0ZWQhIE5vIHZhbGlkYXRpb24gZXJyb3JzLiIKICAgICAgICAgICAgaWYgc3VjY2Vzc19tZXNzYWdlIGluIHBhZ2Vfc291cmNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkZvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSB3aXRoIG5vIHZhbGlkYXRpb24gZXJyb3JzLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiRm9ybSBzdWJtaXNzaW9uIG1heSBoYXZlIGVycm9ycyBvciB1bmV4cGVjdGVkIGJlaGF2aW9yLiBQbGVhc2UgcmV2aWV3IHRoZSBwYWdlIGZvciBlcnJvciBtZXNzYWdlcy4iKQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKICAgIGZpbmFsbHk6CiAgICAgICAgaW5wdXQoIlByZXNzIEVudGVyIHRvIGNsb3NlIHRoZSBicm93c2VyLi4uIikgICMgS2VlcCB0aGUgYnJvd3NlciBvcGVuIHVudGlsIHVzZXIgaW5wdXQKICAgICAgICBkcml2ZXIucXVpdCgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAM0SAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAuxQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAC7FAAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBpbnB1dF9maWVsZHNbaWR4XQogICAgICAgICAgICAgICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiSW5zZXJ0ZWQgcGF5bG9hZCAne3BheWxvYWR9JyBpbnRvIGZpZWxkIHtpZHh9LiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGFyZ3MuZGVsYXkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFZhbGlkYXRlIHRoYXQgdGhlIHBheWxvYWQgd2FzIHN1Y2Nlc3NmdWxseSBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlcmVkX3ZhbHVlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidmFsdWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZW50ZXJlZF92YWx1ZSA9PSBwYXlsb2FkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiUGF5bG9hZCAne3BheWxvYWR9JyBzdWNjZXNzZnVsbHkgZW50ZXJlZCBpbnRvIGZpZWxkIHtpZHh9LiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiUGF5bG9hZCAne3BheWxvYWR9JyBjb3VsZCBub3QgYmUgdmVyaWZpZWQgaW4gZmllbGQge2lkeH0uIEVudGVyZWQgdmFsdWU6ICd7ZW50ZXJlZF92YWx1ZX0nIikKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgaW5zZXJ0aW5nIHBheWxvYWQgaW50byBmaWVsZCB7aWR4fToge2V9IikKCiAgICAgICAgICAgICMgU3VibWl0IHRoZSBmb3JtIGV4cGxpY2l0bHkKICAgICAgICAgICAgZm9yIGZvcm0gaW4gZHJpdmVyLmZpbmRfZWxlbWVudHMoQnkuVEFHX05BTUUsICJmb3JtIik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgc3VibWl0X2J1dHRvbiA9IGZvcm0uZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLy9pbnB1dFtAdHlwZT0nc3VibWl0J10gfCAvL2J1dHRvbltAdHlwZT0nc3VibWl0J10iKQogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24uY2xpY2soKQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJDbGlja2VkIHN1Ym1pdCBidXR0b24gdG8gc3VibWl0IGZvcm0uIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgIyBJZiBubyBzdWJtaXQgYnV0dG9uLCB0cnkgc2VuZGluZyBFTlRFUiBrZXkgdG8gYW55IGlucHV0IGZpZWxkIGluIHRoZSBmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQgPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi4vL2lucHV0IikKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudC5zZW5kX2tleXMoS2V5cy5FTlRFUikKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlNlbnQgRU5URVIga2V5IHRvIGlucHV0IGVsZW1lbnQgdG8gc3VibWl0IGZvcm0uIikKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIHN1Ym1pdHRpbmcgZm9ybSBieSBzZW5kaW5nIEVOVEVSIGtleToge2V9IikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBjbGlja2luZyBzdWJtaXQgYnV0dG9uOiB7ZX0iKQoKICAgICAgICAgICAgIyBMb29rIGZvciB1cGRhdGVkIEphdmFTY3JpcHQgdGV4dCB0byBkZXRlcm1pbmUgdGhlIHJlc3VsdCBvZiBmb3JtIHN1Ym1pc3Npb24KICAgICAgICAgICAgdGltZS5zbGVlcCgyKSAgIyBXYWl0IGZvciBwb3RlbnRpYWwgSmF2YVNjcmlwdCB1cGRhdGVzCiAgICAgICAgICAgIHBhZ2Vfc291cmNlID0gZHJpdmVyLnBhZ2Vfc291cmNlCiAgICAgICAgICAgIHN1Y2Nlc3NfbWVzc2FnZSA9ICJGb3JtIHN1Ym1pdHRlZCEgTm8gdmFsaWRhdGlvbiBlcnJvcnMuIgogICAgICAgICAgICBpZiBzdWNjZXNzX21lc3NhZ2UgaW4gcGFnZV9zb3VyY2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiRm9ybSBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5IHdpdGggbm8gdmFsaWRhdGlvbiBlcnJvcnMuIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJGb3JtIHN1Ym1pc3Npb24gbWF5IGhhdmUgZXJyb3JzIG9yIHVuZXhwZWN0ZWQgYmVoYXZpb3IuIFBsZWFzZSByZXZpZXcgdGhlIHBhZ2UgZm9yIGVycm9yIG1lc3NhZ2VzLiIpCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkFuIGVycm9yIG9jY3VycmVkOiB7ZX0iKQogICAgZmluYWxseToKICAgICAgICBpbnB1dCgiUHJlc3MgRW50ZXIgdG8gY2xvc2UgdGhlIGJyb3dzZXIuLi4iKSAgIyBLZWVwIHRoZSBicm93c2VyIG9wZW4gdW50aWwgdXNlciBpbnB1dAogICAgICAgIGRyaXZlci5xdWl0KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAALsUAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAJBUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAkFQAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IGFyZ3BhcnNlCmZyb20gc2VsZW5pdW0gaW1wb3J0IHdlYmRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5mdXp6ZXIgaW1wb3J0IEZ1enplcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcwpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgdGltZQoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJSdW4gU2VsZW5pdW0gRnV6emVyIG9uIGEgdGFyZ2V0IFVSTC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVGhlIFVSTCB0byBydW4gdGhlIGZ1enplciBhZ2FpbnN0LiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhlYWRsZXNzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iUnVuIENocm9tZSBpbiBoZWFkbGVzcyBtb2RlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBmdXp6aW5nIGF0dGVtcHRzIGluIHNlY29uZHMuIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyBvbiB0aGUgcGFnZS4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICAjIFNldCB1cCBsb2dnaW5nCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPUNvbmZpZy5MT0dfTEVWRUwsIGZpbGVuYW1lPUNvbmZpZy5MT0dfRklMRSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICBsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICAjIFNldCB1cCBDaHJvbWUgb3B0aW9ucwogICAgY2hyb21lX29wdGlvbnMgPSB3ZWJkcml2ZXIuQ2hyb21lT3B0aW9ucygpCiAgICBpZiBhcmdzLmhlYWRsZXNzOgogICAgICAgIGNocm9tZV9vcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCgogICAgIyBJbml0aWFsaXplIHRoZSBXZWJEcml2ZXIKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUoc2VydmljZT13ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UuU2VydmljZShDb25maWcuQ0hST01FRFJJVkVSX1BBVEgpLCBvcHRpb25zPWNocm9tZV9vcHRpb25zKQoKICAgIHRyeToKICAgICAgICBkcml2ZXIuZ2V0KGFyZ3MudXJsKQogICAgICAgIGxvZ2dlci5pbmZvKGYiQWNjZXNzaW5nIFVSTDoge2FyZ3MudXJsfSIpCgogICAgICAgIGZ1enplciA9IEZ1enplcihkcml2ZXIpCgogICAgICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgICAgICMgUHJvbXB0IHRoZSB1c2VyIHRvIHNlbGVjdCBmaWVsZHMgdG8gZnV6egogICAgICAgICAgICBpbnB1dF9maWVsZHMgPSBmdXp6ZXIuZGV0ZWN0X2lucHV0cygpCiAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9maWVsZHM6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiTm8gaW5wdXQgZmllbGRzIGRldGVjdGVkIG9uIHRoZSBwYWdlLiIpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHByaW50KCJEZXRlY3RlZCBpbnB1dCBmaWVsZHM6IikKICAgICAgICAgICAgZm9yIGlkeCwgZmllbGQgaW4gZW51bWVyYXRlKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICBmaWVsZF90eXBlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidHlwZSIpIG9yICJ1bmtub3duIgogICAgICAgICAgICAgICAgZmllbGRfbmFtZSA9IGZpZWxkLmdldF9hdHRyaWJ1dGUoIm5hbWUiKSBvciAiVW5uYW1lZCIKICAgICAgICAgICAgICAgIHByaW50KGYie2lkeH06IHtmaWVsZF9uYW1lfSAodHlwZToge2ZpZWxkX3R5cGV9KSIpCgogICAgICAgICAgICBzZWxlY3RlZF9pbmRpY2VzID0gaW5wdXQoIkVudGVyIHRoZSBpbmRpY2VzIG9mIHRoZSBmaWVsZHMgdG8gZnV6eiAoY29tbWEtc2VwYXJhdGVkKTogIikKICAgICAgICAgICAgc2VsZWN0ZWRfaW5kaWNlcyA9IFtpbnQoaWR4LnN0cmlwKCkpIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlcy5zcGxpdCgiLCIpIGlmIGlkeC5zdHJpcCgpLmlzZGlnaXQoKV0KCiAgICAgICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCiAgICAgICAgICAgIGZvciBpZHggaW4gc2VsZWN0ZWRfaW5kaWNlczoKICAgICAgICAgICAgICAgIGlmIDAgPD0gaWR4IDwgbGVuKGlucHV0X2ZpZWxkcyk6CiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBpbnB1dF9maWVsZHNbaWR4XQogICAgICAgICAgICAgICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnNlbmRfa2V5cyhLZXlzLlRBQikgICMgVHJpZ2dlciBwb3RlbnRpYWwgSmF2YVNjcmlwdCBldmVudHMgYWZ0ZXIgaW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiSW5zZXJ0ZWQgcGF5bG9hZCAne3BheWxvYWR9JyBpbnRvIGZpZWxkIHtpZHh9LiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGFyZ3MuZGVsYXkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFZhbGlkYXRlIHRoYXQgdGhlIHBheWxvYWQgd2FzIHN1Y2Nlc3NmdWxseSBlbnRlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlcmVkX3ZhbHVlID0gZmllbGQuZ2V0X2F0dHJpYnV0ZSgidmFsdWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZW50ZXJlZF92YWx1ZSA9PSBwYXlsb2FkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiUGF5bG9hZCAne3BheWxvYWR9JyBzdWNjZXNzZnVsbHkgZW50ZXJlZCBpbnRvIGZpZWxkIHtpZHh9LiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiUGF5bG9hZCAne3BheWxvYWR9JyBjb3VsZCBub3QgYmUgdmVyaWZpZWQgaW4gZmllbGQge2lkeH0uIEVudGVyZWQgdmFsdWU6ICd7ZW50ZXJlZF92YWx1ZX0nIikKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgaW5zZXJ0aW5nIHBheWxvYWQgaW50byBmaWVsZCB7aWR4fToge2V9IikKCiAgICAgICAgICAgICMgU3VibWl0IHRoZSBmb3JtIGV4cGxpY2l0bHkKICAgICAgICAgICAgZm9yIGZvcm0gaW4gZHJpdmVyLmZpbmRfZWxlbWVudHMoQnkuVEFHX05BTUUsICJmb3JtIik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgc3VibWl0X2J1dHRvbiA9IGZvcm0uZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLy9pbnB1dFtAdHlwZT0nc3VibWl0J10gfCAvL2J1dHRvbltAdHlwZT0nc3VibWl0J10iKQogICAgICAgICAgICAgICAgICAgIHN1Ym1pdF9idXR0b24uY2xpY2soKQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJDbGlja2VkIHN1Ym1pdCBidXR0b24gdG8gc3VibWl0IGZvcm0uIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgIyBJZiBubyBzdWJtaXQgYnV0dG9uLCB0cnkgc2VuZGluZyBFTlRFUiBrZXkgdG8gYW55IGlucHV0IGZpZWxkIGluIHRoZSBmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQgPSBmb3JtLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi4vL2lucHV0IikKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudC5zZW5kX2tleXMoS2V5cy5FTlRFUikKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlNlbnQgRU5URVIga2V5IHRvIGlucHV0IGVsZW1lbnQgdG8gc3VibWl0IGZvcm0uIikKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIHN1Ym1pdHRpbmcgZm9ybSBieSBzZW5kaW5nIEVOVEVSIGtleToge2V9IikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBjbGlja2luZyBzdWJtaXQgYnV0dG9uOiB7ZX0iKQoKICAgICAgICAgICAgIyBMb29rIGZvciB1cGRhdGVkIEphdmFTY3JpcHQgdGV4dCB0byBkZXRlcm1pbmUgdGhlIHJlc3VsdCBvZiBmb3JtIHN1Ym1pc3Npb24KICAgICAgICAgICAgdGltZS5zbGVlcCgyKSAgIyBXYWl0IGZvciBwb3RlbnRpYWwgSmF2YVNjcmlwdCB1cGRhdGVzCiAgICAgICAgICAgIHBhZ2Vfc291cmNlID0gZHJpdmVyLnBhZ2Vfc291cmNlCiAgICAgICAgICAgIHN1Y2Nlc3NfbWVzc2FnZSA9ICJGb3JtIHN1Ym1pdHRlZCEgTm8gdmFsaWRhdGlvbiBlcnJvcnMuIgogICAgICAgICAgICBpZiBzdWNjZXNzX21lc3NhZ2UgaW4gcGFnZV9zb3VyY2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiRm9ybSBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5IHdpdGggbm8gdmFsaWRhdGlvbiBlcnJvcnMuIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJGb3JtIHN1Ym1pc3Npb24gbWF5IGhhdmUgZXJyb3JzIG9yIHVuZXhwZWN0ZWQgYmVoYXZpb3IuIFBsZWFzZSByZXZpZXcgdGhlIHBhZ2UgZm9yIGVycm9yIG1lc3NhZ2VzLiIpCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkFuIGVycm9yIG9jY3VycmVkOiB7ZX0iKQogICAgZmluYWxseToKICAgICAgICBpbnB1dCgiUHJlc3MgRW50ZXIgdG8gY2xvc2UgdGhlIGJyb3dzZXIuLi4iKSAgIyBLZWVwIHRoZSBicm93c2VyIG9wZW4gdW50aWwgdXNlciBpbnB1dAogICAgICAgIGRyaXZlci5xdWl0KCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAACQVAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "selenium_fuzzer/__init__.py",
			"settings":
			{
				"buffer_size": 139,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAKQAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAACgAAAAAAAAAKAAAAAAAAAABAAAACg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAApAAAAIyBJbml0aWFsaXplIHRoZSBzZWxlbml1bV9mdXp6ZXIgcGFja2FnZQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAiwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "selenium_fuzzer/config.py",
			"settings":
			{
				"buffer_size": 342,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAKAAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAIyBJbml0aWFsaXplIHRoZSBzZWxlbml1bV9mdXp6ZXIgcGFja2FnZQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAVwEAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABWAQAAAAAAAFcBAABpbXBvcnQgb3MKCmNsYXNzIENvbmZpZzoKICAgICIiIkNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBzZWxlbml1bSBmdXp6ZXIuIiIiCiAgICBDSFJPTUVEUklWRVJfUEFUSCA9IG9zLmdldGVudignQ0hST01FRFJJVkVSX1BBVEgnLCAnL3Vzci9iaW4vY2hyb21lZHJpdmVyJykKICAgIFNFTEVOSVVNX0hFQURMRVNTID0gb3MuZ2V0ZW52KCdTRUxFTklVTV9IRUFETEVTUycsICdUcnVlJykgPT0gJ1RydWUnCiAgICBMT0dfTEVWRUwgPSBvcy5nZXRlbnYoJ0xPR19MRVZFTCcsICdJTkZPJykKICAgIExPR19GSUxFID0gb3MuZ2V0ZW52KCdMT0dfRklMRScsICdzZWxlbml1bV9mdXp6ZXIubG9nJykK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXAQAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABWAQAAaW1wb3J0IG9zCgpjbGFzcyBDb25maWc6CiAgICAiIiJDb25maWd1cmF0aW9uIHNldHRpbmdzIGZvciB0aGUgc2VsZW5pdW0gZnV6emVyLiIiIgogICAgQ0hST01FRFJJVkVSX1BBVEggPSBvcy5nZXRlbnYoJ0NIUk9NRURSSVZFUl9QQVRIJywgJy91c3IvYmluL2Nocm9tZWRyaXZlcicpCiAgICBTRUxFTklVTV9IRUFETEVTUyA9IG9zLmdldGVudignU0VMRU5JVU1fSEVBRExFU1MnLCAnVHJ1ZScpID09ICdUcnVlJwogICAgTE9HX0xFVkVMID0gb3MuZ2V0ZW52KCdMT0dfTEVWRUwnLCAnSU5GTycpCiAgICBMT0dfRklMRSA9IG9zLmdldGVudignTE9HX0ZJTEUnLCAnc2VsZW5pdW1fZnV6emVyLmxvZycp",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAFYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAADgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABWAQAAAAAAAA4DAABmcm9tIHNlbGVuaXVtIGltcG9ydCB3ZWJkcml2ZXIKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLm9wdGlvbnMgaW1wb3J0IE9wdGlvbnMKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UgaW1wb3J0IFNlcnZpY2UKZnJvbSBzZWxlbml1bV9mdXp6ZXIuY29uZmlnIGltcG9ydCBDb25maWcKCmRlZiBjcmVhdGVfZHJpdmVyKGhlYWRsZXNzOiBib29sID0gRmFsc2UpOgogICAgIiIiQ3JlYXRlIGFuZCBjb25maWd1cmUgYSBTZWxlbml1bSBXZWJEcml2ZXIgaW5zdGFuY2UuIiIiCiAgICBvcHRpb25zID0gT3B0aW9ucygpCiAgICBpZiBoZWFkbGVzczoKICAgICAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWdwdSIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS13aW5kb3ctc2l6ZT0xOTIwLDEwODAiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tbm8tc2FuZGJveCIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWRldi1zaG0tdXNhZ2UiKQoKICAgICMgVXNlIHRoZSBDaHJvbWVEcml2ZXIgcGF0aCBmcm9tIGNvbmZpZy5weQogICAgZHJpdmVyX3BhdGggPSBDb25maWcuQ0hST01FRFJJVkVSX1BBVEgKICAgIHNlcnZpY2UgPSBTZXJ2aWNlKGV4ZWN1dGFibGVfcGF0aD1kcml2ZXJfcGF0aCkKCiAgICBkcml2ZXIgPSB3ZWJkcml2ZXIuQ2hyb21lKHNlcnZpY2U9c2VydmljZSwgb3B0aW9ucz1vcHRpb25zKQogICAgcmV0dXJuIGRyaXZlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "selenium_fuzzer/logger.py",
			"settings":
			{
				"buffer_size": 619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAawIAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "selenium_fuzzer/selenium_driver.py",
			"settings":
			{
				"buffer_size": 783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA+gIAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAD6AgAAZnJvbSBzZWxlbml1bSBpbXBvcnQgd2ViZHJpdmVyCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5zZXJ2aWNlIGltcG9ydCBTZXJ2aWNlCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5vcHRpb25zIGltcG9ydCBPcHRpb25zCmZyb20gc2VsZW5pdW1fZnV6emVyLmNvbmZpZyBpbXBvcnQgQ29uZmlnCgpkZWYgY3JlYXRlX2RyaXZlcigpIC0+IHdlYmRyaXZlci5DaHJvbWU6CiAgICAiIiJDcmVhdGUgYW5kIHJldHVybiBhIGNvbmZpZ3VyZWQgU2VsZW5pdW0gV2ViRHJpdmVyIGluc3RhbmNlLiIiIgogICAgb3B0aW9ucyA9IE9wdGlvbnMoKQogICAgaWYgQ29uZmlnLlNFTEVOSVVNX0hFQURMRVNTOgogICAgICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCctLWhlYWRsZXNzJykKICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCctLWRpc2FibGUtZ3B1JykKICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCctLW5vLXNhbmRib3gnKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoJy0tZGlzYWJsZS1kZXYtc2htLXVzYWdlJykKICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCctLWlnbm9yZS1jZXJ0aWZpY2F0ZS1lcnJvcnMnKQoKICAgIHNlcnZpY2UgPSBTZXJ2aWNlKGV4ZWN1dGFibGVfcGF0aD1Db25maWcuQ0hST01FRFJJVkVSX1BBVEgpCiAgICBkcml2ZXIgPSB3ZWJkcml2ZXIuQ2hyb21lKHNlcnZpY2U9c2VydmljZSwgb3B0aW9ucz1vcHRpb25zKQogICAgZHJpdmVyLmltcGxpY2l0bHlfd2FpdCgxMCkKICAgIHJldHVybiBkcml2ZXIK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoCAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAWwMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABbAwAAZnJvbSBzZWxlbml1bSBpbXBvcnQgd2ViZHJpdmVyCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5zZXJ2aWNlIGltcG9ydCBTZXJ2aWNlCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5vcHRpb25zIGltcG9ydCBPcHRpb25zCmZyb20gc2VsZW5pdW1fZnV6emVyLmNvbmZpZyBpbXBvcnQgQ29uZmlnCgpkZWYgY3JlYXRlX2RyaXZlcigpIC0+IHdlYmRyaXZlci5DaHJvbWU6CiAgICAiIiIKICAgIENyZWF0ZSBhbmQgcmV0dXJuIGEgY29uZmlndXJlZCBTZWxlbml1bSBXZWJEcml2ZXIgaW5zdGFuY2UuCiAgICAiIiIKICAgIG9wdGlvbnMgPSBPcHRpb25zKCkKICAgIAogICAgIyBTZXQgaGVhZGxlc3MgbW9kZSBiYXNlZCBvbiBjb25maWd1cmF0aW9uCiAgICBpZiBDb25maWcuU0VMRU5JVU1fSEVBRExFU1M6CiAgICAgICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoJy0taGVhZGxlc3MnKQogICAgCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgnLS1kaXNhYmxlLWdwdScpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgnLS1uby1zYW5kYm94JykKICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCctLWRpc2FibGUtZGV2LXNobS11c2FnZScpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgnLS1pZ25vcmUtY2VydGlmaWNhdGUtZXJyb3JzJykKCiAgICAjIEluaXRpYWxpemUgQ2hyb21lRHJpdmVyCiAgICBzZXJ2aWNlID0gU2VydmljZShleGVjdXRhYmxlX3BhdGg9Q29uZmlnLkNIUk9NRURSSVZFUl9QQVRIKQogICAgZHJpdmVyID0gd2ViZHJpdmVyLkNocm9tZShzZXJ2aWNlPXNlcnZpY2UsIG9wdGlvbnM9b3B0aW9ucykKICAgIGRyaXZlci5pbXBsaWNpdGx5X3dhaXQoMTApCiAgICByZXR1cm4gZHJpdmVyCg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsDAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAfAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAQAgAAAAAAAHwBAABmcm9tIHNlbGVuaXVtIGltcG9ydCB3ZWJkcml2ZXIKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLm9wdGlvbnMgaW1wb3J0IE9wdGlvbnMKCmRlZiBjcmVhdGVfZHJpdmVyKGhlYWRsZXNzOiBib29sID0gRmFsc2UpOgogICAgb3B0aW9ucyA9IE9wdGlvbnMoKQogICAgaWYgaGVhZGxlc3M6CiAgICAgICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0taGVhZGxlc3MiKQogICAgICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCItLWRpc2FibGUtZ3B1IikKICAgICAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS13aW5kb3ctc2l6ZT0xOTIwLDEwODAiKQoKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUob3B0aW9ucz1vcHRpb25zKQogICAgcmV0dXJuIGRyaXZlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AQAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAOAwAAAAAAABACAABmcm9tIHNlbGVuaXVtIGltcG9ydCB3ZWJkcml2ZXIKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLm9wdGlvbnMgaW1wb3J0IE9wdGlvbnMKCmRlZiBjcmVhdGVfZHJpdmVyKGhlYWRsZXNzOiBib29sID0gRmFsc2UpOgogICAgIiIiQ3JlYXRlIGFuZCBjb25maWd1cmUgYSBTZWxlbml1bSBXZWJEcml2ZXIgaW5zdGFuY2UuIiIiCiAgICBvcHRpb25zID0gT3B0aW9ucygpCiAgICBpZiBoZWFkbGVzczoKICAgICAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWdwdSIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS13aW5kb3ctc2l6ZT0xOTIwLDEwODAiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tbm8tc2FuZGJveCIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWRldi1zaG0tdXNhZ2UiKQoKICAgIGRyaXZlciA9IHdlYmRyaXZlci5DaHJvbWUob3B0aW9ucz1vcHRpb25zKQogICAgcmV0dXJuIGRyaXZlcgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAOAwAAAAAAAA4DAABmcm9tIHNlbGVuaXVtIGltcG9ydCB3ZWJkcml2ZXIKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UgaW1wb3J0IFNlcnZpY2UKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLm9wdGlvbnMgaW1wb3J0IE9wdGlvbnMKZnJvbSBzZWxlbml1bV9mdXp6ZXIuY29uZmlnIGltcG9ydCBDb25maWcKCmRlZiBjcmVhdGVfZHJpdmVyKGhlYWRsZXNzOiBib29sID0gRmFsc2UpOgogICAgIiIiQ3JlYXRlIGFuZCBjb25maWd1cmUgYSBTZWxlbml1bSBXZWJEcml2ZXIgaW5zdGFuY2UuIiIiCiAgICBvcHRpb25zID0gT3B0aW9ucygpCiAgICBpZiBoZWFkbGVzczoKICAgICAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWdwdSIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS13aW5kb3ctc2l6ZT0xOTIwLDEwODAiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tbm8tc2FuZGJveCIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWRldi1zaG0tdXNhZ2UiKQoKICAgICMgVXNlIHRoZSBDaHJvbWVEcml2ZXIgcGF0aCBmcm9tIGNvbmZpZy5weQogICAgZHJpdmVyX3BhdGggPSBDb25maWcuQ0hST01FRFJJVkVSX1BBVEgKICAgIHNlcnZpY2UgPSBTZXJ2aWNlKGV4ZWN1dGFibGVfcGF0aD1kcml2ZXJfcGF0aCkKCiAgICBkcml2ZXIgPSB3ZWJkcml2ZXIuQ2hyb21lKHNlcnZpY2U9c2VydmljZSwgb3B0aW9ucz1vcHRpb25zKQogICAgcmV0dXJuIGRyaXZlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAOAwAAAAAAAA4DAABmcm9tIHNlbGVuaXVtIGltcG9ydCB3ZWJkcml2ZXIKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLnNlcnZpY2UgaW1wb3J0IFNlcnZpY2UKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY2hyb21lLm9wdGlvbnMgaW1wb3J0IE9wdGlvbnMKZnJvbSBzZWxlbml1bV9mdXp6ZXIuY29uZmlnIGltcG9ydCBDb25maWcKCmRlZiBjcmVhdGVfZHJpdmVyKGhlYWRsZXNzOiBib29sID0gRmFsc2UpOgogICAgIiIiQ3JlYXRlIGFuZCBjb25maWd1cmUgYSBTZWxlbml1bSBXZWJEcml2ZXIgaW5zdGFuY2UuIiIiCiAgICBvcHRpb25zID0gT3B0aW9ucygpCiAgICBpZiBoZWFkbGVzczoKICAgICAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1oZWFkbGVzcyIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWdwdSIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS13aW5kb3ctc2l6ZT0xOTIwLDEwODAiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tbm8tc2FuZGJveCIpCiAgICBvcHRpb25zLmFkZF9hcmd1bWVudCgiLS1kaXNhYmxlLWRldi1zaG0tdXNhZ2UiKQoKICAgICMgVXNlIHRoZSBDaHJvbWVEcml2ZXIgcGF0aCBmcm9tIGNvbmZpZy5weQogICAgZHJpdmVyX3BhdGggPSBDb25maWcuQ0hST01FRFJJVkVSX1BBVEgKICAgIHNlcnZpY2UgPSBTZXJ2aWNlKGV4ZWN1dGFibGVfcGF0aD1kcml2ZXJfcGF0aCkKCiAgICBkcml2ZXIgPSB3ZWJkcml2ZXIuQ2hyb21lKHNlcnZpY2U9c2VydmljZSwgb3B0aW9ucz1vcHRpb25zKQogICAgcmV0dXJuIGRyaXZlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAOAwAAZnJvbSBzZWxlbml1bSBpbXBvcnQgd2ViZHJpdmVyCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5zZXJ2aWNlIGltcG9ydCBTZXJ2aWNlCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNocm9tZS5vcHRpb25zIGltcG9ydCBPcHRpb25zCmZyb20gc2VsZW5pdW1fZnV6emVyLmNvbmZpZyBpbXBvcnQgQ29uZmlnCgpkZWYgY3JlYXRlX2RyaXZlcihoZWFkbGVzczogYm9vbCA9IEZhbHNlKToKICAgICIiIkNyZWF0ZSBhbmQgY29uZmlndXJlIGEgU2VsZW5pdW0gV2ViRHJpdmVyIGluc3RhbmNlLiIiIgogICAgb3B0aW9ucyA9IE9wdGlvbnMoKQogICAgaWYgaGVhZGxlc3M6CiAgICAgICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0taGVhZGxlc3MiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tZGlzYWJsZS1ncHUiKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0td2luZG93LXNpemU9MTkyMCwxMDgwIikKICAgIG9wdGlvbnMuYWRkX2FyZ3VtZW50KCItLW5vLXNhbmRib3giKQogICAgb3B0aW9ucy5hZGRfYXJndW1lbnQoIi0tZGlzYWJsZS1kZXYtc2htLXVzYWdlIikKCiAgICAjIFVzZSB0aGUgQ2hyb21lRHJpdmVyIHBhdGggZnJvbSBjb25maWcucHkKICAgIGRyaXZlcl9wYXRoID0gQ29uZmlnLkNIUk9NRURSSVZFUl9QQVRICiAgICBzZXJ2aWNlID0gU2VydmljZShleGVjdXRhYmxlX3BhdGg9ZHJpdmVyX3BhdGgpCgogICAgZHJpdmVyID0gd2ViZHJpdmVyLkNocm9tZShzZXJ2aWNlPXNlcnZpY2UsIG9wdGlvbnM9b3B0aW9ucykKICAgIHJldHVybiBkcml2ZXI",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAADwMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "selenium_fuzzer/utils.py",
			"settings":
			{
				"buffer_size": 3306,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAdwUAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAHcFAAAAAAAAigwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwUAAAAAAAB3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAHcFAAAAAAAAdwUAAAAAAAA7AAAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgUAAAAAAAB3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"cut",
					{
						"event":
						{
							"modifier_keys":
							{
							},
							"text_point": 1401,
							"x": 331.529571533,
							"y": 949.570800781
						}
					},
					"AQAAAHgFAAAAAAAAeAUAAAAAAAArAAAAZnJvbSBzZWxlbml1bV9mdXp6ZXIudXRpbHMgaW1wb3J0IGdldF94cGF0aA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAAHcFAAAAAAAAdwUAAAAAAAABAAAACnYFAAAAAAAAdgUAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					{
						"event":
						{
							"modifier_keys":
							{
							},
							"text_point": 170,
							"x": 360.734436035,
							"y": 130.64024353
						}
					},
					"AQAAAKoAAAAAAAAA1QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAKoAAAAAAAAAqgAAAAAAAAArAAAAZnJvbSBzZWxlbml1bV9mdXp6ZXIudXRpbHMgaW1wb3J0IGdldF94cGF0aKkAAAAAAAAAqQAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKkAAAAAAAAAqgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQAAAAAAAACpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"",
					null,
					"AQAAAKoAAAAAAAAA8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACBDAAAaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnJlbW90ZS53ZWJkcml2ZXIgaW1wb3J0IFdlYkRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5yZW1vdGUud2ViZWxlbWVudCBpbXBvcnQgV2ViRWxlbWVudApmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5ICAjIEVuc3VyZSB0aGlzIGlzIGltcG9ydGVkCgpkZWYgZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpIC0+IExpc3Rbc3RyXToKICAgICIiIkdlbmVyYXRlIGEgbGlzdCBvZiBzYWZlIHBheWxvYWRzIGZvciBmdXp6aW5nLiIiIgogICAgcGF5bG9hZHMgPSBbXQoKICAgICMgU2hvcnQgcmFuZG9tIHN0cmluZ3MKICAgIGZvciBfIGluIHJhbmdlKDUpOgogICAgICAgIHBheWxvYWRzLmFwcGVuZCgnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz0xMCkpKQoKICAgICMgTG9uZyBzdHJpbmdzIHRvIHRlc3QgaW5wdXQgbGltaXRzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0EnICogMjU2KQogICAgcGF5bG9hZHMuYXBwZW5kKCdCJyAqIDEwMjQpCgogICAgIyBTdHJpbmdzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzCiAgICBzcGVjaWFsX2NoYXJzID0gIiFAIyQlXiYqKClfKy09W117fXw7OicsLjw+Lz8iCiAgICBwYXlsb2Fkcy5hcHBlbmQoc3BlY2lhbF9jaGFycykKCiAgICAjIFVuaWNvZGUgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCfmtYvor5XkuK3mloflrZfnrKYnKSAgIyBDaGluZXNlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn8J+Yg/CfkY3wn4+78J+UpScpICAgICAgIyBFbW9qaXMKCiAgICAjIE51bWVyaWMgaW5wdXRzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzEyMzQ1Njc4OTAnKQogICAgcGF5bG9hZHMuYXBwZW5kKCctOTk5OTk5OTk5JykKCiAgICAjIEVtcHR5IHN0cmluZwogICAgcGF5bG9hZHMuYXBwZW5kKCcnKQoKICAgICMgV2hpdGVzcGFjZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJyAgICcpICAjIFNwYWNlcwogICAgcGF5bG9hZHMuYXBwZW5kKCdcdFxuJykgICMgVGFiIGFuZCBuZXdsaW5lCgogICAgIyBFbWFpbHMKICAgIHBheWxvYWRzLmFwcGVuZCgndGVzdEBleGFtcGxlLmNvbScpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3VzZXIubmFtZSt0YWcrc29ydGluZ0BleGFtcGxlLmNvbScpCgogICAgcmV0dXJuIHBheWxvYWRzCgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXI6IFdlYkRyaXZlciwgZWxlbWVudDogV2ViRWxlbWVudCkgLT4gTm9uZToKICAgICIiIlNjcm9sbCB0aGUgZWxlbWVudCBpbnRvIHZpZXcuIiIiCiAgICBkcml2ZXIuZXhlY3V0ZV9zY3JpcHQoCiAgICAgICAgImFyZ3VtZW50c1swXS5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ2NlbnRlcid9KTsiLAogICAgICAgIGVsZW1lbnQKICAgICkKCmRlZiBzY3JvbGxfaW50b192aWV3KGRyaXZlciwgZWxlbWVudDogV2ViRWxlbWVudCkgLT4gTm9uZToKICAgICIiIlNjcm9sbCB0aGUgZWxlbWVudCBpbnRvIHZpZXcuIiIiCiAgICBkcml2ZXIuZXhlY3V0ZV9zY3JpcHQoImFyZ3VtZW50c1swXS5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJywgYmxvY2s6ICdjZW50ZXInIH0pOyIsIGVsZW1lbnQpCgpkZWYgZ2V0X3hwYXRoKGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IHN0cjoKICAgICIiIkdldCB0aGUgWFBhdGggb2YgYSBXZWJFbGVtZW50IGJ5IHRyYXZlcnNpbmcgdGhlIERPTS4iIiIKICAgIGNvbXBvbmVudHMgPSBbXQogICAgY2hpbGQgPSBlbGVtZW50CiAgICB3aGlsZSBjaGlsZCBpcyBub3QgTm9uZToKICAgICAgICBwYXJlbnQgPSBjaGlsZC5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLiIpCiAgICAgICAgc2libGluZ3MgPSBwYXJlbnQuZmluZF9lbGVtZW50cyhCeS5YUEFUSCwgY2hpbGQudGFnX25hbWUpCgogICAgICAgIGlmIGxlbihzaWJsaW5ncykgPiAxOgogICAgICAgICAgICBpbmRleCA9IDEKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHNpYmxpbmdzKSk6CiAgICAgICAgICAgICAgICBpZiBzaWJsaW5nc1tpXSA9PSBjaGlsZDoKICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoZid7Y2hpbGQudGFnX25hbWV9W3tpbmRleH1dJykKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjaGlsZCA9IHBhcmVudAogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgYnJlYWsKCiAgICBjb21wb25lbnRzLnJldmVyc2UoKQogICAgcmV0dXJuICcvJyArICcvJy5qb2luKGNvbXBvbmVudHMpCmRlZiBnZXRfeHBhdGgoZWxlbWVudDogV2ViRWxlbWVudCkgLT4gc3RyOgogICAgIiIiR2V0IHRoZSBYUGF0aCBvZiBhIFdlYkVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgRE9NLiIiIgogICAgY29tcG9uZW50cyA9IFtdCiAgICBjaGlsZCA9IGVsZW1lbnQKICAgIHdoaWxlIGNoaWxkIGlzIG5vdCBOb25lOgogICAgICAgIHBhcmVudCA9IGNoaWxkLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi4uIikKICAgICAgICBzaWJsaW5ncyA9IHBhcmVudC5maW5kX2VsZW1lbnRzKEJ5LlhQQVRILCBjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgaWYgbGVuKHNpYmxpbmdzKSA+IDE6CiAgICAgICAgICAgIGluZGV4ID0gMQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oc2libGluZ3MpKToKICAgICAgICAgICAgICAgIGlmIHNpYmxpbmdzW2ldID09IGNoaWxkOgogICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaSArIDEKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChmJ3tjaGlsZC50YWdfbmFtZX1be2luZGV4fV0nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNoaWxkID0gcGFyZW50CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBicmVhawoKICAgIGNvbXBvbmVudHMucmV2ZXJzZSgpCiAgICByZXR1cm4gJy8nICsgJy8nLmpvaW4oY29tcG9uZW50cykK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAABpDAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAkgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACSBQAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uCgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKZGVmIGdldF94cGF0aChlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBzdHI6CiAgICAiIiJHZXQgdGhlIFhQYXRoIG9mIGEgV2ViRWxlbWVudCBieSB0cmF2ZXJzaW5nIHRoZSBET00uIiIiCiAgICBjb21wb25lbnRzID0gW10KICAgIGNoaWxkID0gZWxlbWVudAogICAgd2hpbGUgY2hpbGQgaXMgbm90IE5vbmU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEdldCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGN1cnJlbnQgbm9kZQogICAgICAgICAgICBwYXJlbnQgPSBjaGlsZC5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEZpbmQgc2libGluZ3Mgd2l0aCB0aGUgc2FtZSB0YWcgbmFtZSB0byBkZXRlcm1pbmUgdGhlIGluZGV4CiAgICAgICAgICAgIHNpYmxpbmdzID0gcGFyZW50LmZpbmRfZWxlbWVudHMoQnkuWFBBVEgsIGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgaWYgbGVuKHNpYmxpbmdzKSA+IDE6CiAgICAgICAgICAgICAgICBpbmRleCA9IDEKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzaWJsaW5ncykpOgogICAgICAgICAgICAgICAgICAgIGlmIHNpYmxpbmdzW2ldID09IGNoaWxkOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChmJ3tjaGlsZC50YWdfbmFtZX1be2luZGV4fV0nKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICBjaGlsZCA9IHBhcmVudAogICAgICAgIGV4Y2VwdCAoTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgRXhjZXB0aW9uKSBhcyBlOgogICAgICAgICAgICAjIElmIHdlIGVuY291bnRlciBhbiBlcnJvciBnZXR0aW5nIHRoZSBwYXJlbnQsIGJyZWFrIHRoZSBsb29wCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAxQsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADdCwAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uCmltcG9ydCByYW5kb20KaW1wb3J0IHN0cmluZwpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdAoKZGVmIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyLCBlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBOb25lOgogICAgIiIiU2Nyb2xsIHRoZSBlbGVtZW50IGludG8gdmlldy4iIiIKICAgIGRyaXZlci5leGVjdXRlX3NjcmlwdCgiYXJndW1lbnRzWzBdLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ2NlbnRlcicgfSk7IiwgZWxlbWVudCkKCmRlZiBnZXRfeHBhdGgoZWxlbWVudDogV2ViRWxlbWVudCkgLT4gc3RyOgogICAgIiIiR2V0IHRoZSBYUGF0aCBvZiBhIFdlYkVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgRE9NLiIiIgogICAgY29tcG9uZW50cyA9IFtdCiAgICBjaGlsZCA9IGVsZW1lbnQKICAgIHdoaWxlIGNoaWxkIGlzIG5vdCBOb25lOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBHZXQgdGhlIHBhcmVudCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IG5vZGUKICAgICAgICAgICAgcGFyZW50ID0gY2hpbGQuZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBGaW5kIHNpYmxpbmdzIHdpdGggdGhlIHNhbWUgdGFnIG5hbWUgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleAogICAgICAgICAgICBzaWJsaW5ncyA9IHBhcmVudC5maW5kX2VsZW1lbnRzKEJ5LlhQQVRILCBjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgICAgIGlmIGxlbihzaWJsaW5ncykgPiAxOgogICAgICAgICAgICAgICAgaW5kZXggPSAxCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oc2libGluZ3MpKToKICAgICAgICAgICAgICAgICAgICBpZiBzaWJsaW5nc1tpXSA9PSBjaGlsZDoKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpICsgMQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoZid7Y2hpbGQudGFnX25hbWV9W3tpbmRleH1dJykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQKICAgICAgICBleGNlcHQgKE5vU3VjaEVsZW1lbnRFeGNlcHRpb24sIEV4Y2VwdGlvbikgYXMgZToKICAgICAgICAgICAgIyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXJyb3IgZ2V0dGluZyB0aGUgcGFyZW50LCBicmVhayB0aGUgbG9vcAogICAgICAgICAgICBicmVhawoKICAgIGNvbXBvbmVudHMucmV2ZXJzZSgpCiAgICByZXR1cm4gJy8nICsgJy8nLmpvaW4oY29tcG9uZW50cykKCmRlZiBnZW5lcmF0ZV9zYWZlX3BheWxvYWRzKCkgLT4gTGlzdFtzdHJdOgogICAgIiIiR2VuZXJhdGUgYSBsaXN0IG9mIHNhZmUgcGF5bG9hZHMgZm9yIGZ1enppbmcuIiIiCiAgICBwYXlsb2FkcyA9IFtdCgogICAgIyBTaG9ydCByYW5kb20gc3RyaW5ncwogICAgZm9yIF8gaW4gcmFuZ2UoNSk6CiAgICAgICAgcGF5bG9hZHMuYXBwZW5kKCcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzLCBrPTEwKSkpCgogICAgIyBMb25nIHN0cmluZ3MgdG8gdGVzdCBpbnB1dCBsaW1pdHMKICAgIHBheWxvYWRzLmFwcGVuZCgnQScgKiAyNTYpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0InICogMTAyNCkKCiAgICAjIFN0cmluZ3Mgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMKICAgIHNwZWNpYWxfY2hhcnMgPSAiIUAjJCVeJiooKV8rLT1bXXt9fDs6JywuPD4vPyIKICAgIHBheWxvYWRzLmFwcGVuZChzcGVjaWFsX2NoYXJzKQoKICAgICMgVW5pY29kZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ+a1i+ivleS4reaWh+Wtl+espicpICAjIENoaW5lc2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCfwn5iD8J+RjfCfj7vwn5SlJykgICAgICAjIEVtb2ppcwoKICAgICMgTnVtZXJpYyBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzNDU2Nzg5MCcpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJy05OTk5OTk5OTknKQoKICAgICMgRW1wdHkgc3RyaW5nCiAgICBwYXlsb2Fkcy5hcHBlbmQoJycpCgogICAgIyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgnICAgJykgICMgU3BhY2VzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ1x0XG4nKSAgIyBUYWIgYW5kIG5ld2xpbmUKCiAgICAjIEVtYWlscwogICAgcGF5bG9hZHMuYXBwZW5kKCd0ZXN0QGV4YW1wbGUuY29tJykKICAgIHBheWxvYWRzLmFwcGVuZCgndXNlci5uYW1lK3RhZytzb3J0aW5nQGV4YW1wbGUuY29tJykKCiAgICAjIFNRTCBpbmplY3Rpb24gYXR0ZW1wdHMgKHNhZmUsIG5vdCBoYXJtZnVsKQogICAgcGF5bG9hZHMuYXBwZW5kKCInIE9SICcxJz0nMSIpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIic7IERST1AgVEFCTEUgdXNlcnM7IC0tIikKCiAgICAjIEhUTUwgdGFncyB0byB0ZXN0IFhTUyBhbmQgcmVuZGVyaW5nIGlzc3VlcwogICAgcGF5bG9hZHMuYXBwZW5kKCc8c2NyaXB0PmFsZXJ0KCJYU1MiKTwvc2NyaXB0PicpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxkaXY+PHA+VGVzdDwvcD48L2Rpdj4nKQoKICAgICMgVHlwaWNhbCBjb3Jwb3JhdGUgaW5wdXRzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS5jb20nKSAgIyBVUkwKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzIE1haW4gU3QuLCBTcHJpbmdmaWVsZCwgVVNBJykgICMgQWRkcmVzcwogICAgcGF5bG9hZHMuYXBwZW5kKCdKb2huIERvZScpICAjIE5hbWUKICAgIHBheWxvYWRzLmFwcGVuZCgnIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAxIicpICAjIFNRTC1saWtlIGlucHV0CgogICAgcmV0dXJuIHBheWxvYWRzCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAATAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABkDAAAaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnJlbW90ZS53ZWJkcml2ZXIgaW1wb3J0IFdlYkRyaXZlcgpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5yZW1vdGUud2ViZWxlbWVudCBpbXBvcnQgV2ViRWxlbWVudApmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24uYnkgaW1wb3J0IEJ5CmZyb20gc2VsZW5pdW0uY29tbW9uLmV4Y2VwdGlvbnMgaW1wb3J0IE5vU3VjaEVsZW1lbnRFeGNlcHRpb24sIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbgppbXBvcnQgdGltZQoKZGVmIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyOiBXZWJEcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKZGVmIGdldF94cGF0aChlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBzdHI6CiAgICAiIiJHZXQgdGhlIFhQYXRoIG9mIGEgV2ViRWxlbWVudCBieSB0cmF2ZXJzaW5nIHRoZSBET00uIiIiCiAgICBjb21wb25lbnRzID0gW10KICAgIGNoaWxkID0gZWxlbWVudAogICAgd2hpbGUgY2hpbGQgaXMgbm90IE5vbmU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEdldCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGN1cnJlbnQgbm9kZQogICAgICAgICAgICBwYXJlbnQgPSBjaGlsZC5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEZpbmQgc2libGluZ3Mgd2l0aCB0aGUgc2FtZSB0YWcgbmFtZSB0byBkZXRlcm1pbmUgdGhlIGluZGV4CiAgICAgICAgICAgIHNpYmxpbmdzID0gcGFyZW50LmZpbmRfZWxlbWVudHMoQnkuWFBBVEgsIGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgaWYgbGVuKHNpYmxpbmdzKSA+IDE6CiAgICAgICAgICAgICAgICBpbmRleCA9IDEKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzaWJsaW5ncykpOgogICAgICAgICAgICAgICAgICAgIGlmIHNpYmxpbmdzW2ldID09IGNoaWxkOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChmJ3tjaGlsZC50YWdfbmFtZX1be2luZGV4fV0nKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICBjaGlsZCA9IHBhcmVudAogICAgICAgIGV4Y2VwdCAoTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uKSBhcyBlOgogICAgICAgICAgICAjIElmIHdlIGVuY291bnRlciBhbiBlcnJvciBnZXR0aW5nIHRoZSBwYXJlbnQsIGJyZWFrIHRoZSBsb29wCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQoKZGVmIGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKSAtPiBMaXN0W3N0cl06CiAgICAiIiJHZW5lcmF0ZSBhIGxpc3Qgb2Ygc2FmZSBwYXlsb2FkcyBmb3IgZnV6emluZy4iIiIKICAgIHBheWxvYWRzID0gW10KCiAgICAjIFNob3J0IHJhbmRvbSBzdHJpbmdzCiAgICBmb3IgXyBpbiByYW5nZSg1KToKICAgICAgICBwYXlsb2Fkcy5hcHBlbmQoJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MTApKSkKCiAgICAjIExvbmcgc3RyaW5ncyB0byB0ZXN0IGlucHV0IGxpbWl0cwogICAgcGF5bG9hZHMuYXBwZW5kKCdBJyAqIDI1NikKICAgIHBheWxvYWRzLmFwcGVuZCgnQicgKiAxMDI0KQoKICAgICMgU3RyaW5ncyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycwogICAgc3BlY2lhbF9jaGFycyA9ICIhQCMkJV4mKigpXystPVtde318OzonLC48Pi8/IgogICAgcGF5bG9hZHMuYXBwZW5kKHNwZWNpYWxfY2hhcnMpCgogICAgIyBVbmljb2RlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn5rWL6K+V5Lit5paH5a2X56ymJykgICMgQ2hpbmVzZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ/CfmIPwn5GN8J+Pu/CflKUnKSAgICAgICMgRW1vamlzCgogICAgIyBOdW1lcmljIGlucHV0cwogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjM0NTY3ODkwJykKICAgIHBheWxvYWRzLmFwcGVuZCgnLTk5OTk5OTk5OScpCgogICAgIyBFbXB0eSBzdHJpbmcKICAgIHBheWxvYWRzLmFwcGVuZCgnJykKCiAgICAjIFdoaXRlc3BhY2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCcgICAnKSAgIyBTcGFjZXMKICAgIHBheWxvYWRzLmFwcGVuZCgnXHRcbicpICAjIFRhYiBhbmQgbmV3bGluZQoKICAgICMgRW1haWxzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3Rlc3RAZXhhbXBsZS5jb20nKQogICAgcGF5bG9hZHMuYXBwZW5kKCd1c2VyLm5hbWUrdGFnK3NvcnRpbmdAZXhhbXBsZS5jb20nKQoKICAgICMgU1FMIGluamVjdGlvbiBhdHRlbXB0cyAoc2FmZSwgbm90IGhhcm1mdWwpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIicgT1IgJzEnPScxIikKICAgIHBheWxvYWRzLmFwcGVuZCgiJzsgRFJPUCBUQUJMRSB1c2VyczsgLS0iKQoKICAgICMgSFRNTCB0YWdzIHRvIHRlc3QgWFNTIGFuZCByZW5kZXJpbmcgaXNzdWVzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxzY3JpcHQ+YWxlcnQoIlhTUyIpPC9zY3JpcHQ+JykKICAgIHBheWxvYWRzLmFwcGVuZCgnPGRpdj48cD5UZXN0PC9wPjwvZGl2PicpCgogICAgIyBUeXBpY2FsIGNvcnBvcmF0ZSBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlLmNvbScpICAjIFVSTAogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjMgTWFpbiBTdC4sIFNwcmluZ2ZpZWxkLCBVU0EnKSAgIyBBZGRyZXNzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0pvaG4gRG9lJykgICMgTmFtZQogICAgcGF5bG9hZHMuYXBwZW5kKCciU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IDEiJykgICMgU1FMLWxpa2UgaW5wdXQKCiAgICByZXR1cm4gcGF5bG9hZHMKCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAABMDAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAwwwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADbDAAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24KaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKZGVmIGdldF94cGF0aChlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBzdHI6CiAgICAiIiJHZXQgdGhlIFhQYXRoIG9mIGEgV2ViRWxlbWVudCBieSB0cmF2ZXJzaW5nIHRoZSBET00uIiIiCiAgICBjb21wb25lbnRzID0gW10KICAgIGNoaWxkID0gZWxlbWVudAogICAgd2hpbGUgY2hpbGQgaXMgbm90IE5vbmU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEdldCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGN1cnJlbnQgbm9kZQogICAgICAgICAgICBwYXJlbnQgPSBjaGlsZC5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLiIpCgogICAgICAgICAgICAjIEVuc3VyZSB0aGUgcGFyZW50IGlzIG5vdCB0aGUgZG9jdW1lbnQgcm9vdCBvciBhbiBpbnZhbGlkIGVsZW1lbnQKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UocGFyZW50LCBXZWJFbGVtZW50KToKICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICAjIEZpbmQgc2libGluZ3Mgd2l0aCB0aGUgc2FtZSB0YWcgbmFtZSB0byBkZXRlcm1pbmUgdGhlIGluZGV4CiAgICAgICAgICAgIHNpYmxpbmdzID0gcGFyZW50LmZpbmRfZWxlbWVudHMoQnkuWFBBVEgsIGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgaWYgbGVuKHNpYmxpbmdzKSA+IDE6CiAgICAgICAgICAgICAgICBpbmRleCA9IDEKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzaWJsaW5ncykpOgogICAgICAgICAgICAgICAgICAgIGlmIHNpYmxpbmdzW2ldID09IGNoaWxkOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChmJ3tjaGlsZC50YWdfbmFtZX1be2luZGV4fV0nKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICAjIE1vdmUgdXAgdG8gdGhlIHBhcmVudCBmb3IgdGhlIG5leHQgaXRlcmF0aW9uCiAgICAgICAgICAgIGNoaWxkID0gcGFyZW50CgogICAgICAgIGV4Y2VwdCAoTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uKSBhcyBlOgogICAgICAgICAgICAjIElmIHdlIGVuY291bnRlciBhbiBlcnJvciBnZXR0aW5nIHRoZSBwYXJlbnQsIGJyZWFrIHRoZSBsb29wCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQoKZGVmIGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKSAtPiBMaXN0W3N0cl06CiAgICAiIiJHZW5lcmF0ZSBhIGxpc3Qgb2Ygc2FmZSBwYXlsb2FkcyBmb3IgZnV6emluZy4iIiIKICAgIHBheWxvYWRzID0gW10KCiAgICAjIFNob3J0IHJhbmRvbSBzdHJpbmdzCiAgICBmb3IgXyBpbiByYW5nZSg1KToKICAgICAgICBwYXlsb2Fkcy5hcHBlbmQoJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MTApKSkKCiAgICAjIExvbmcgc3RyaW5ncyB0byB0ZXN0IGlucHV0IGxpbWl0cwogICAgcGF5bG9hZHMuYXBwZW5kKCdBJyAqIDI1NikKICAgIHBheWxvYWRzLmFwcGVuZCgnQicgKiAxMDI0KQoKICAgICMgU3RyaW5ncyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycwogICAgc3BlY2lhbF9jaGFycyA9ICIhQCMkJV4mKigpXystPVtde318OzonLC48Pi8/IgogICAgcGF5bG9hZHMuYXBwZW5kKHNwZWNpYWxfY2hhcnMpCgogICAgIyBVbmljb2RlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn5rWL6K+V5Lit5paH5a2X56ymJykgICMgQ2hpbmVzZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ/CfmIPwn5GN8J+Pu/CflKUnKSAgICAgICMgRW1vamlzCgogICAgIyBOdW1lcmljIGlucHV0cwogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjM0NTY3ODkwJykKICAgIHBheWxvYWRzLmFwcGVuZCgnLTk5OTk5OTk5OScpCgogICAgIyBFbXB0eSBzdHJpbmcKICAgIHBheWxvYWRzLmFwcGVuZCgnJykKCiAgICAjIFdoaXRlc3BhY2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCcgICAnKSAgIyBTcGFjZXMKICAgIHBheWxvYWRzLmFwcGVuZCgnXHRcbicpICAjIFRhYiBhbmQgbmV3bGluZQoKICAgICMgRW1haWxzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3Rlc3RAZXhhbXBsZS5jb20nKQogICAgcGF5bG9hZHMuYXBwZW5kKCd1c2VyLm5hbWUrdGFnK3NvcnRpbmdAZXhhbXBsZS5jb20nKQoKICAgICMgU1FMIGluamVjdGlvbiBhdHRlbXB0cyAoc2FmZSwgbm90IGhhcm1mdWwpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIicgT1IgJzEnPScxIikKICAgIHBheWxvYWRzLmFwcGVuZCgiJzsgRFJPUCBUQUJMRSB1c2VyczsgLS0iKQoKICAgICMgSFRNTCB0YWdzIHRvIHRlc3QgWFNTIGFuZCByZW5kZXJpbmcgaXNzdWVzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxzY3JpcHQ+YWxlcnQoIlhTUyIpPC9zY3JpcHQ+JykKICAgIHBheWxvYWRzLmFwcGVuZCgnPGRpdj48cD5UZXN0PC9wPjwvZGl2PicpCgogICAgIyBUeXBpY2FsIGNvcnBvcmF0ZSBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlLmNvbScpICAjIFVSTAogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjMgTWFpbiBTdC4sIFNwcmluZ2ZpZWxkLCBVU0EnKSAgIyBBZGRyZXNzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0pvaG4gRG9lJykgICMgTmFtZQogICAgcGF5bG9hZHMuYXBwZW5kKCciU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IDEiJykgICMgU1FMLWxpa2UgaW5wdXQKCiAgICByZXR1cm4gcGF5bG9hZHMK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADDDAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAeg8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACSDwAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24KaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmltcG9ydCB0aW1lCgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKZGVmIGdldF94cGF0aChlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBzdHI6CiAgICAiIiJHZXQgdGhlIFhQYXRoIG9mIGEgV2ViRWxlbWVudCBieSB0cmF2ZXJzaW5nIHRoZSBET00uIiIiCiAgICBjb21wb25lbnRzID0gW10KICAgIGNoaWxkID0gZWxlbWVudAogICAgd2hpbGUgY2hpbGQgaXMgbm90IE5vbmU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEdldCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGN1cnJlbnQgbm9kZQogICAgICAgICAgICBwYXJlbnQgPSBjaGlsZC5maW5kX2VsZW1lbnQoQnkuWFBBVEgsICIuLiIpCgogICAgICAgICAgICAjIEVuc3VyZSB0aGUgcGFyZW50IGlzIG5vdCB0aGUgZG9jdW1lbnQgcm9vdCBvciBhbiBpbnZhbGlkIGVsZW1lbnQKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UocGFyZW50LCBXZWJFbGVtZW50KToKICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICAjIEZpbmQgc2libGluZ3Mgd2l0aCB0aGUgc2FtZSB0YWcgbmFtZSB0byBkZXRlcm1pbmUgdGhlIGluZGV4CiAgICAgICAgICAgIHNpYmxpbmdzID0gcGFyZW50LmZpbmRfZWxlbWVudHMoQnkuWFBBVEgsIGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgaWYgbGVuKHNpYmxpbmdzKSA+IDE6CiAgICAgICAgICAgICAgICBpbmRleCA9IDEKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzaWJsaW5ncykpOgogICAgICAgICAgICAgICAgICAgIGlmIHNpYmxpbmdzW2ldID09IGNoaWxkOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChmJ3tjaGlsZC50YWdfbmFtZX1be2luZGV4fV0nKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICAjIE1vdmUgdXAgdG8gdGhlIHBhcmVudCBmb3IgdGhlIG5leHQgaXRlcmF0aW9uCiAgICAgICAgICAgIGNoaWxkID0gcGFyZW50CgogICAgICAgIGV4Y2VwdCAoTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uKSBhcyBlOgogICAgICAgICAgICAjIElmIHdlIGVuY291bnRlciBhbiBlcnJvciBnZXR0aW5nIHRoZSBwYXJlbnQsIGJyZWFrIHRoZSBsb29wCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQoKZGVmIGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKSAtPiBMaXN0W3N0cl06CiAgICAiIiJHZW5lcmF0ZSBhIGxpc3Qgb2Ygc2FmZSBwYXlsb2FkcyBmb3IgZnV6emluZy4iIiIKICAgIHBheWxvYWRzID0gW10KCiAgICAjIFNob3J0IHJhbmRvbSBzdHJpbmdzCiAgICBmb3IgXyBpbiByYW5nZSg1KToKICAgICAgICBwYXlsb2Fkcy5hcHBlbmQoJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MTApKSkKCiAgICAjIExvbmcgc3RyaW5ncyB0byB0ZXN0IGlucHV0IGxpbWl0cwogICAgcGF5bG9hZHMuYXBwZW5kKCdBJyAqIDI1NikKICAgIHBheWxvYWRzLmFwcGVuZCgnQicgKiAxMDI0KQoKICAgICMgU3RyaW5ncyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycwogICAgc3BlY2lhbF9jaGFycyA9ICIhQCMkJV4mKigpXystPVtde318OzonLC48Pi8/IgogICAgcGF5bG9hZHMuYXBwZW5kKHNwZWNpYWxfY2hhcnMpCgogICAgIyBVbmljb2RlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn5rWL6K+V5Lit5paH5a2X56ymJykgICMgQ2hpbmVzZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ/CfmIPwn5GN8J+Pu/CflKUnKSAgICAgICMgRW1vamlzCgogICAgIyBOdW1lcmljIGlucHV0cwogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjM0NTY3ODkwJykKICAgIHBheWxvYWRzLmFwcGVuZCgnLTk5OTk5OTk5OScpCgogICAgIyBFbXB0eSBzdHJpbmcKICAgIHBheWxvYWRzLmFwcGVuZCgnJykKCiAgICAjIFdoaXRlc3BhY2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCcgICAnKSAgIyBTcGFjZXMKICAgIHBheWxvYWRzLmFwcGVuZCgnXHRcbicpICAjIFRhYiBhbmQgbmV3bGluZQoKICAgICMgRW1haWxzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3Rlc3RAZXhhbXBsZS5jb20nKQogICAgcGF5bG9hZHMuYXBwZW5kKCd1c2VyLm5hbWUrdGFnK3NvcnRpbmdAZXhhbXBsZS5jb20nKQoKICAgICMgU1FMIGluamVjdGlvbiBhdHRlbXB0cyAoc2FmZSwgbm90IGhhcm1mdWwpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIicgT1IgJzEnPScxIikKICAgIHBheWxvYWRzLmFwcGVuZCgiJzsgRFJPUCBUQUJMRSB1c2VyczsgLS0iKQoKICAgICMgSFRNTCB0YWdzIHRvIHRlc3QgWFNTIGFuZCByZW5kZXJpbmcgaXNzdWVzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxzY3JpcHQ+YWxlcnQoIlhTUyIpPC9zY3JpcHQ+JykKICAgIHBheWxvYWRzLmFwcGVuZCgnPGRpdj48cD5UZXN0PC9wPjwvZGl2PicpCgogICAgIyBUeXBpY2FsIGNvcnBvcmF0ZSBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlLmNvbScpICAjIFVSTAogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjMgTWFpbiBTdC4sIFNwcmluZ2ZpZWxkLCBVU0EnKSAgIyBBZGRyZXNzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0pvaG4gRG9lJykgICMgTmFtZQogICAgcGF5bG9hZHMuYXBwZW5kKCciU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IDEiJykgICMgU1FMLWxpa2UgaW5wdXQKCiAgICByZXR1cm4gcGF5bG9hZHMKCmRlZiByZXRyeV9vbl9zdGFsZV9lbGVtZW50KGZ1bmMpOgogICAgIiIiRGVjb3JhdG9yIHRvIHJldHJ5IGEgZnVuY3Rpb24gaWYgYSBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24gaXMgZW5jb3VudGVyZWQuIiIiCiAgICBkZWYgd3JhcHBlcigqYXJncywgKiprd2FyZ3MpOgogICAgICAgIG1heF9yZXRyaWVzID0gMwogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBleGNlcHQgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgaWYgYXR0ZW1wdCA8IG1heF9yZXRyaWVzIC0gMToKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICByZXR1cm4gd3JhcHBlcgoKQHJldHJ5X29uX3N0YWxlX2VsZW1lbnQKZGVmIGlzX2VsZW1lbnRfZGlzcGxheWVkKGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IGJvb2w6CiAgICAiIiJDaGVjayBpZiBhbiBlbGVtZW50IGlzIGRpc3BsYXllZCwgd2l0aCByZXRyeSBsb2dpYyBmb3Igc3RhbGUgZWxlbWVudHMuIiIiCiAgICByZXR1cm4gZWxlbWVudC5pc19kaXNwbGF5ZWQoKQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAB6DwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA/hAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAWEQAAaW1wb3J0IGxvZ2dpbmcKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24KaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmltcG9ydCB0aW1lCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKCmRlZiBnZXRfeHBhdGgoZWxlbWVudDogV2ViRWxlbWVudCkgLT4gc3RyOgogICAgIiIiR2V0IHRoZSBYUGF0aCBvZiBhIFdlYkVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgRE9NLiIiIgogICAgY29tcG9uZW50cyA9IFtdCiAgICBjaGlsZCA9IGVsZW1lbnQKICAgIHdoaWxlIGNoaWxkIGlzIG5vdCBOb25lOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBHZXQgdGhlIHBhcmVudCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IG5vZGUKICAgICAgICAgICAgcGFyZW50ID0gY2hpbGQuZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLi4iKQoKICAgICAgICAgICAgIyBFbnN1cmUgdGhlIHBhcmVudCBpcyBub3QgdGhlIGRvY3VtZW50IHJvb3Qgb3IgYW4gaW52YWxpZCBlbGVtZW50CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHBhcmVudCwgV2ViRWxlbWVudCk6CiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICAgICAgIyBGaW5kIHNpYmxpbmdzIHdpdGggdGhlIHNhbWUgdGFnIG5hbWUgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleAogICAgICAgICAgICBzaWJsaW5ncyA9IHBhcmVudC5maW5kX2VsZW1lbnRzKEJ5LlhQQVRILCBjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgICAgIGlmIGxlbihzaWJsaW5ncykgPiAxOgogICAgICAgICAgICAgICAgaW5kZXggPSAxCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oc2libGluZ3MpKToKICAgICAgICAgICAgICAgICAgICBpZiBzaWJsaW5nc1tpXSA9PSBjaGlsZDoKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpICsgMQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoZid7Y2hpbGQudGFnX25hbWV9W3tpbmRleH1dJykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgIyBNb3ZlIHVwIHRvIHRoZSBwYXJlbnQgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvbgogICAgICAgICAgICBjaGlsZCA9IHBhcmVudAoKICAgICAgICBleGNlcHQgKE5vU3VjaEVsZW1lbnRFeGNlcHRpb24sIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbikgYXMgZToKICAgICAgICAgICAgIyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXJyb3IgZ2V0dGluZyB0aGUgcGFyZW50LCBicmVhayB0aGUgbG9vcAogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkVuY291bnRlcmVkIGV4Y2VwdGlvbiB3aGlsZSBnZXR0aW5nIHBhcmVudDoge2V9IikKICAgICAgICAgICAgYnJlYWsKCiAgICBjb21wb25lbnRzLnJldmVyc2UoKQogICAgcmV0dXJuICcvJyArICcvJy5qb2luKGNvbXBvbmVudHMpCgoKZGVmIGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKSAtPiBMaXN0W3N0cl06CiAgICAiIiJHZW5lcmF0ZSBhIGxpc3Qgb2Ygc2FmZSBwYXlsb2FkcyBmb3IgZnV6emluZy4iIiIKICAgIHBheWxvYWRzID0gW10KCiAgICAjIFNob3J0IHJhbmRvbSBzdHJpbmdzCiAgICBmb3IgXyBpbiByYW5nZSg1KToKICAgICAgICBwYXlsb2Fkcy5hcHBlbmQoJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MTApKSkKCiAgICAjIExvbmcgc3RyaW5ncyB0byB0ZXN0IGlucHV0IGxpbWl0cwogICAgcGF5bG9hZHMuYXBwZW5kKCdBJyAqIDI1NikKICAgIHBheWxvYWRzLmFwcGVuZCgnQicgKiAxMDI0KQoKICAgICMgU3RyaW5ncyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycwogICAgc3BlY2lhbF9jaGFycyA9ICIhQCMkJV4mKigpXystPVtde318OzonLC48Pi8/IgogICAgcGF5bG9hZHMuYXBwZW5kKHNwZWNpYWxfY2hhcnMpCgogICAgIyBVbmljb2RlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn5rWL6K+V5Lit5paH5a2X56ymJykgICMgQ2hpbmVzZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ/CfmIPwn5GN8J+Pu/CflKUnKSAgICAgICMgRW1vamlzCgogICAgIyBOdW1lcmljIGlucHV0cwogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjM0NTY3ODkwJykKICAgIHBheWxvYWRzLmFwcGVuZCgnLTk5OTk5OTk5OScpCgogICAgIyBFbXB0eSBzdHJpbmcKICAgIHBheWxvYWRzLmFwcGVuZCgnJykKCiAgICAjIFdoaXRlc3BhY2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCcgICAnKSAgIyBTcGFjZXMKICAgIHBheWxvYWRzLmFwcGVuZCgnXHRcbicpICAjIFRhYiBhbmQgbmV3bGluZQoKICAgICMgRW1haWxzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3Rlc3RAZXhhbXBsZS5jb20nKQogICAgcGF5bG9hZHMuYXBwZW5kKCd1c2VyLm5hbWUrdGFnK3NvcnRpbmdAZXhhbXBsZS5jb20nKQoKICAgICMgU1FMIGluamVjdGlvbiBhdHRlbXB0cyAoc2FmZSwgbm90IGhhcm1mdWwpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIicgT1IgJzEnPScxIikKICAgIHBheWxvYWRzLmFwcGVuZCgiJzsgRFJPUCBUQUJMRSB1c2VyczsgLS0iKQoKICAgICMgSFRNTCB0YWdzIHRvIHRlc3QgWFNTIGFuZCByZW5kZXJpbmcgaXNzdWVzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxzY3JpcHQ+YWxlcnQoIlhTUyIpPC9zY3JpcHQ+JykKICAgIHBheWxvYWRzLmFwcGVuZCgnPGRpdj48cD5UZXN0PC9wPjwvZGl2PicpCgogICAgIyBUeXBpY2FsIGNvcnBvcmF0ZSBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlLmNvbScpICAjIFVSTAogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjMgTWFpbiBTdC4sIFNwcmluZ2ZpZWxkLCBVU0EnKSAgIyBBZGRyZXNzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0pvaG4gRG9lJykgICMgTmFtZQogICAgcGF5bG9hZHMuYXBwZW5kKCciU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IDEiJykgICMgU1FMLWxpa2UgaW5wdXQKCiAgICByZXR1cm4gcGF5bG9hZHMKCgpkZWYgcmV0cnlfb25fc3RhbGVfZWxlbWVudChmdW5jKToKICAgICIiIkRlY29yYXRvciB0byByZXRyeSBhIGZ1bmN0aW9uIGlmIGEgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGlzIGVuY291bnRlcmVkLiIiIgogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBtYXhfcmV0cmllcyA9IDMKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfcmV0cmllcyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZXhjZXB0IFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24gZW5jb3VudGVyZWQuIEF0dGVtcHQge2F0dGVtcHQgKyAxfSBvZiB7bWF4X3JldHJpZXN9LiBFcnJvcjoge2V9IikKICAgICAgICAgICAgICAgIGlmIGF0dGVtcHQgPCBtYXhfcmV0cmllcyAtIDE6CiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJNYXggcmV0cmllcyByZWFjaGVkLiBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24gY291bGQgbm90IGJlIHJlc29sdmVkOiB7ZX0iKQogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICByZXR1cm4gd3JhcHBlcgoKCkByZXRyeV9vbl9zdGFsZV9lbGVtZW50CmRlZiBpc19lbGVtZW50X2Rpc3BsYXllZChlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBib29sOgogICAgIiIiQ2hlY2sgaWYgYW4gZWxlbWVudCBpcyBkaXNwbGF5ZWQsIHdpdGggcmV0cnkgbG9naWMgZm9yIHN0YWxlIGVsZW1lbnRzLiIiIgogICAgcmV0dXJuIGVsZW1lbnQuaXNfZGlzcGxheWVkKCkK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAD+EAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAkhEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACqEQAAaW1wb3J0IGxvZ2dpbmcKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLmNvbW1vbi5leGNlcHRpb25zIGltcG9ydCBOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24KaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmltcG9ydCB0aW1lCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IE5vbmU6CiAgICAiIiJTY3JvbGwgdGhlIGVsZW1lbnQgaW50byB2aWV3LiIiIgogICAgZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCJhcmd1bWVudHNbMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnY2VudGVyJyB9KTsiLCBlbGVtZW50KQoKCmRlZiBnZXRfeHBhdGgoZWxlbWVudDogV2ViRWxlbWVudCkgLT4gc3RyOgogICAgIiIiR2V0IHRoZSBYUGF0aCBvZiBhIFdlYkVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgRE9NLiIiIgogICAgY29tcG9uZW50cyA9IFtdCiAgICBjaGlsZCA9IGVsZW1lbnQKICAgIHdoaWxlIGNoaWxkIGlzIG5vdCBOb25lOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBHZXQgdGhlIHBhcmVudCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IG5vZGUKICAgICAgICAgICAgcGFyZW50ID0gY2hpbGQuZmluZF9lbGVtZW50KEJ5LlhQQVRILCAiLi4iKQoKICAgICAgICAgICAgIyBFbnN1cmUgdGhlIHBhcmVudCBpcyBub3QgdGhlIGRvY3VtZW50IHJvb3Qgb3IgYW4gaW52YWxpZCBlbGVtZW50CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHBhcmVudCwgV2ViRWxlbWVudCk6CiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICAgICAgIyBGaW5kIHNpYmxpbmdzIHdpdGggdGhlIHNhbWUgdGFnIG5hbWUgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleAogICAgICAgICAgICBzaWJsaW5ncyA9IHBhcmVudC5maW5kX2VsZW1lbnRzKEJ5LlhQQVRILCBjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgICAgIGlmIGxlbihzaWJsaW5ncykgPiAxOgogICAgICAgICAgICAgICAgaW5kZXggPSAxCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oc2libGluZ3MpKToKICAgICAgICAgICAgICAgICAgICBpZiBzaWJsaW5nc1tpXSA9PSBjaGlsZDoKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpICsgMQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY29tcG9uZW50cy5hcHBlbmQoZid7Y2hpbGQudGFnX25hbWV9W3tpbmRleH1dJykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGNoaWxkLnRhZ19uYW1lKQoKICAgICAgICAgICAgIyBNb3ZlIHVwIHRvIHRoZSBwYXJlbnQgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvbgogICAgICAgICAgICBjaGlsZCA9IHBhcmVudAoKICAgICAgICBleGNlcHQgKE5vU3VjaEVsZW1lbnRFeGNlcHRpb24sIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbikgYXMgZToKICAgICAgICAgICAgIyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXJyb3IgZ2V0dGluZyB0aGUgcGFyZW50LCBicmVhayB0aGUgbG9vcAogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkVuY291bnRlcmVkIGV4Y2VwdGlvbiB3aGlsZSBnZXR0aW5nIHBhcmVudDoge2V9IikKICAgICAgICAgICAgYnJlYWsKCiAgICBjb21wb25lbnRzLnJldmVyc2UoKQogICAgcmV0dXJuICcvJyArICcvJy5qb2luKGNvbXBvbmVudHMpCgoKZGVmIGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMoKSAtPiBMaXN0W3N0cl06CiAgICAiIiJHZW5lcmF0ZSBhIGxpc3Qgb2Ygc2FmZSBwYXlsb2FkcyBmb3IgZnV6emluZy4iIiIKICAgIHBheWxvYWRzID0gW10KCiAgICAjIFNob3J0IHJhbmRvbSBzdHJpbmdzCiAgICBmb3IgXyBpbiByYW5nZSg1KToKICAgICAgICBwYXlsb2Fkcy5hcHBlbmQoJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MTApKSkKCiAgICAjIExvbmcgc3RyaW5ncyB0byB0ZXN0IGlucHV0IGxpbWl0cwogICAgcGF5bG9hZHMuYXBwZW5kKCdBJyAqIDI1NikKICAgIHBheWxvYWRzLmFwcGVuZCgnQicgKiAxMDI0KQoKICAgICMgU3RyaW5ncyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycwogICAgc3BlY2lhbF9jaGFycyA9ICIhQCMkJV4mKigpXystPVtde318OzonLC48Pi8/IgogICAgcGF5bG9hZHMuYXBwZW5kKHNwZWNpYWxfY2hhcnMpCgogICAgIyBVbmljb2RlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgn5rWL6K+V5Lit5paH5a2X56ymJykgICMgQ2hpbmVzZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ/CfmIPwn5GN8J+Pu/CflKUnKSAgICAgICMgRW1vamlzCgogICAgIyBOdW1lcmljIGlucHV0cwogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjM0NTY3ODkwJykKICAgIHBheWxvYWRzLmFwcGVuZCgnLTk5OTk5OTk5OScpCgogICAgIyBFbXB0eSBzdHJpbmcKICAgIHBheWxvYWRzLmFwcGVuZCgnJykKCiAgICAjIFdoaXRlc3BhY2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCcgICAnKSAgIyBTcGFjZXMKICAgIHBheWxvYWRzLmFwcGVuZCgnXHRcbicpICAjIFRhYiBhbmQgbmV3bGluZQoKICAgICMgRW1haWxzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ3Rlc3RAZXhhbXBsZS5jb20nKQogICAgcGF5bG9hZHMuYXBwZW5kKCd1c2VyLm5hbWUrdGFnK3NvcnRpbmdAZXhhbXBsZS5jb20nKQoKICAgICMgU1FMIGluamVjdGlvbiBhdHRlbXB0cyAoc2FmZSwgbm90IGhhcm1mdWwpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIicgT1IgJzEnPScxIikKICAgIHBheWxvYWRzLmFwcGVuZCgiJzsgRFJPUCBUQUJMRSB1c2VyczsgLS0iKQoKICAgICMgSFRNTCB0YWdzIHRvIHRlc3QgWFNTIGFuZCByZW5kZXJpbmcgaXNzdWVzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxzY3JpcHQ+YWxlcnQoIlhTUyIpPC9zY3JpcHQ+JykKICAgIHBheWxvYWRzLmFwcGVuZCgnPGRpdj48cD5UZXN0PC9wPjwvZGl2PicpCgogICAgIyBUeXBpY2FsIGNvcnBvcmF0ZSBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlLmNvbScpICAjIFVSTAogICAgcGF5bG9hZHMuYXBwZW5kKCcxMjMgTWFpbiBTdC4sIFNwcmluZ2ZpZWxkLCBVU0EnKSAgIyBBZGRyZXNzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0pvaG4gRG9lJykgICMgTmFtZQogICAgcGF5bG9hZHMuYXBwZW5kKCciU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IDEiJykgICMgU1FMLWxpa2UgaW5wdXQKCiAgICByZXR1cm4gcGF5bG9hZHMKCgpkZWYgcmV0cnlfb25fc3RhbGVfZWxlbWVudChmdW5jKToKICAgICIiIkRlY29yYXRvciB0byByZXRyeSBhIGZ1bmN0aW9uIGlmIGEgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGlzIGVuY291bnRlcmVkLiIiIgogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBtYXhfcmV0cmllcyA9IDUgICMgSW5jcmVhc2VkIHJldHJpZXMgdG8gaGFuZGxlIGR5bmFtaWMgZWxlbWVudHMgYmV0dGVyCiAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UobWF4X3JldHJpZXMpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgIGV4Y2VwdCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGVuY291bnRlcmVkLiBBdHRlbXB0IHthdHRlbXB0ICsgMX0gb2Yge21heF9yZXRyaWVzfS4gRXJyb3I6IHtlfSIpCiAgICAgICAgICAgICAgICBpZiBhdHRlbXB0IDwgbWF4X3JldHJpZXMgLSAxOgogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTWF4IHJldHJpZXMgcmVhY2hlZC4gU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGNvdWxkIG5vdCBiZSByZXNvbHZlZDoge2V9IikKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgcmV0dXJuIHdyYXBwZXIKCgpAcmV0cnlfb25fc3RhbGVfZWxlbWVudApkZWYgaXNfZWxlbWVudF9kaXNwbGF5ZWQoZWxlbWVudDogV2ViRWxlbWVudCwgZHJpdmVyKSAtPiBib29sOgogICAgIiIiQ2hlY2sgaWYgYW4gZWxlbWVudCBpcyBkaXNwbGF5ZWQsIHdpdGggcmV0cnkgbG9naWMgZm9yIHN0YWxlIGVsZW1lbnRzLiIiIgogICAgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGVsZW1lbnQpICAjIFNjcm9sbCBpbnRvIHZpZXcgYmVmb3JlIGNoZWNraW5nIHZpc2liaWxpdHkKICAgIHJldHVybiBlbGVtZW50LmlzX2Rpc3BsYXllZCgpCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAACSEQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA6RYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABFwAAaW1wb3J0IGxvZ2dpbmcKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5zdXBwb3J0LnVpIGltcG9ydCBXZWJEcml2ZXJXYWl0CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQgaW1wb3J0IGV4cGVjdGVkX2NvbmRpdGlvbnMgYXMgRUMKZnJvbSBzZWxlbml1bS5jb21tb24uZXhjZXB0aW9ucyBpbXBvcnQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uLCBUaW1lb3V0RXhjZXB0aW9uCmltcG9ydCByYW5kb20KaW1wb3J0IHN0cmluZwpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdAppbXBvcnQgdGltZQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKZGVmIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyLCBlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBOb25lOgogICAgIiIiU2Nyb2xsIHRoZSBlbGVtZW50IGludG8gdmlldy4iIiIKICAgIGRyaXZlci5leGVjdXRlX3NjcmlwdCgiYXJndW1lbnRzWzBdLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ2NlbnRlcicgfSk7IiwgZWxlbWVudCkKCgpkZWYgZ2V0X3hwYXRoKGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IHN0cjoKICAgICIiIkdldCB0aGUgWFBhdGggb2YgYSBXZWJFbGVtZW50IGJ5IHRyYXZlcnNpbmcgdGhlIERPTS4iIiIKICAgIGNvbXBvbmVudHMgPSBbXQogICAgY2hpbGQgPSBlbGVtZW50CiAgICB3aGlsZSBjaGlsZCBpcyBub3QgTm9uZToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgR2V0IHRoZSBwYXJlbnQgZWxlbWVudCBvZiB0aGUgY3VycmVudCBub2RlCiAgICAgICAgICAgIHBhcmVudCA9IGNoaWxkLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi4uIikKCiAgICAgICAgICAgICMgRW5zdXJlIHRoZSBwYXJlbnQgaXMgbm90IHRoZSBkb2N1bWVudCByb290IG9yIGFuIGludmFsaWQgZWxlbWVudAogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJlbnQsIFdlYkVsZW1lbnQpOgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgICMgRmluZCBzaWJsaW5ncyB3aXRoIHRoZSBzYW1lIHRhZyBuYW1lIHRvIGRldGVybWluZSB0aGUgaW5kZXgKICAgICAgICAgICAgc2libGluZ3MgPSBwYXJlbnQuZmluZF9lbGVtZW50cyhCeS5YUEFUSCwgY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICBpZiBsZW4oc2libGluZ3MpID4gMToKICAgICAgICAgICAgICAgIGluZGV4ID0gMQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHNpYmxpbmdzKSk6CiAgICAgICAgICAgICAgICAgICAgaWYgc2libGluZ3NbaV0gPT0gY2hpbGQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGYne2NoaWxkLnRhZ19uYW1lfVt7aW5kZXh9XScpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgICAgICMgTW92ZSB1cCB0byB0aGUgcGFyZW50IGZvciB0aGUgbmV4dCBpdGVyYXRpb24KICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQKCiAgICAgICAgZXhjZXB0IChOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24pIGFzIGU6CiAgICAgICAgICAgICMgSWYgd2UgZW5jb3VudGVyIGFuIGVycm9yIGdldHRpbmcgdGhlIHBhcmVudCwgYnJlYWsgdGhlIGxvb3AKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJFbmNvdW50ZXJlZCBleGNlcHRpb24gd2hpbGUgZ2V0dGluZyBwYXJlbnQ6IHtlfSIpCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQoKCmRlZiBnZW5lcmF0ZV9zYWZlX3BheWxvYWRzKCkgLT4gTGlzdFtzdHJdOgogICAgIiIiR2VuZXJhdGUgYSBsaXN0IG9mIHNhZmUgcGF5bG9hZHMgZm9yIGZ1enppbmcuIiIiCiAgICBwYXlsb2FkcyA9IFtdCgogICAgIyBTaG9ydCByYW5kb20gc3RyaW5ncwogICAgZm9yIF8gaW4gcmFuZ2UoNSk6CiAgICAgICAgcGF5bG9hZHMuYXBwZW5kKCcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzLCBrPTEwKSkpCgogICAgIyBMb25nIHN0cmluZ3MgdG8gdGVzdCBpbnB1dCBsaW1pdHMKICAgIHBheWxvYWRzLmFwcGVuZCgnQScgKiAyNTYpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0InICogMTAyNCkKCiAgICAjIFN0cmluZ3Mgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMKICAgIHNwZWNpYWxfY2hhcnMgPSAiIUAjJCVeJiooKV8rLT1bXXt9fDs6JywuPD4vPyIKICAgIHBheWxvYWRzLmFwcGVuZChzcGVjaWFsX2NoYXJzKQoKICAgICMgVW5pY29kZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ+a1i+ivleS4reaWh+Wtl+espicpICAjIENoaW5lc2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCfwn5iD8J+RjfCfj7vwn5SlJykgICAgICAjIEVtb2ppcwoKICAgICMgTnVtZXJpYyBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzNDU2Nzg5MCcpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJy05OTk5OTk5OTknKQoKICAgICMgRW1wdHkgc3RyaW5nCiAgICBwYXlsb2Fkcy5hcHBlbmQoJycpCgogICAgIyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgnICAgJykgICMgU3BhY2VzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ1x0XG4nKSAgIyBUYWIgYW5kIG5ld2xpbmUKCiAgICAjIEVtYWlscwogICAgcGF5bG9hZHMuYXBwZW5kKCd0ZXN0QGV4YW1wbGUuY29tJykKICAgIHBheWxvYWRzLmFwcGVuZCgndXNlci5uYW1lK3RhZytzb3J0aW5nQGV4YW1wbGUuY29tJykKCiAgICAjIFNRTCBpbmplY3Rpb24gYXR0ZW1wdHMgKHNhZmUsIG5vdCBoYXJtZnVsKQogICAgcGF5bG9hZHMuYXBwZW5kKCInIE9SICcxJz0nMSIpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIic7IERST1AgVEFCTEUgdXNlcnM7IC0tIikKCiAgICAjIEhUTUwgdGFncyB0byB0ZXN0IFhTUyBhbmQgcmVuZGVyaW5nIGlzc3VlcwogICAgcGF5bG9hZHMuYXBwZW5kKCc8c2NyaXB0PmFsZXJ0KCJYU1MiKTwvc2NyaXB0PicpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxkaXY+PHA+VGVzdDwvcD48L2Rpdj4nKQoKICAgICMgVHlwaWNhbCBjb3Jwb3JhdGUgaW5wdXRzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS5jb20nKSAgIyBVUkwKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzIE1haW4gU3QuLCBTcHJpbmdmaWVsZCwgVVNBJykgICMgQWRkcmVzcwogICAgcGF5bG9hZHMuYXBwZW5kKCdKb2huIERvZScpICAjIE5hbWUKICAgIHBheWxvYWRzLmFwcGVuZCgnIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAxIicpICAjIFNRTC1saWtlIGlucHV0CgogICAgcmV0dXJuIHBheWxvYWRzCgoKZGVmIHJldHJ5X29uX3N0YWxlX2VsZW1lbnQoZnVuYyk6CiAgICAiIiJEZWNvcmF0b3IgdG8gcmV0cnkgYSBmdW5jdGlvbiBpZiBhIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBpcyBlbmNvdW50ZXJlZC4iIiIKICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgbWF4X3JldHJpZXMgPSA1ICAjIEluY3JlYXNlZCByZXRyaWVzIHRvIGhhbmRsZSBkeW5hbWljIGVsZW1lbnRzIGJldHRlcgogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBleGNlcHQgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBlbmNvdW50ZXJlZC4gQXR0ZW1wdCB7YXR0ZW1wdCArIDF9IG9mIHttYXhfcmV0cmllc30uIEVycm9yOiB7ZX0iKQogICAgICAgICAgICAgICAgaWYgYXR0ZW1wdCA8IG1heF9yZXRyaWVzIC0gMToKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIk1heCByZXRyaWVzIHJlYWNoZWQuIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBjb3VsZCBub3QgYmUgcmVzb2x2ZWQ6IHtlfSIpCiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgIHJldHVybiB3cmFwcGVyCgoKQHJldHJ5X29uX3N0YWxlX2VsZW1lbnQKZGVmIGlzX2VsZW1lbnRfZGlzcGxheWVkKGVsZW1lbnQ6IFdlYkVsZW1lbnQsIGRyaXZlcikgLT4gYm9vbDoKICAgICIiIkNoZWNrIGlmIGFuIGVsZW1lbnQgaXMgZGlzcGxheWVkLCB3aXRoIHJldHJ5IGxvZ2ljIGZvciBzdGFsZSBlbGVtZW50cy4iIiIKICAgIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyLCBlbGVtZW50KSAgIyBTY3JvbGwgaW50byB2aWV3IGJlZm9yZSBjaGVja2luZyB2aXNpYmlsaXR5CiAgICByZXR1cm4gZWxlbWVudC5pc19kaXNwbGF5ZWQoKQoKCmRlZiBmaW5kX2FuZF9pbnRlcmFjdF93aXRoX2lucHV0KGRyaXZlciwgeHBhdGg6IHN0ciwgY3NzX3NlbGVjdG9yOiBzdHIsIHBheWxvYWQ6IHN0cikgLT4gTm9uZToKICAgICIiIkZpbmQgYW4gaW5wdXQgZWxlbWVudCBieSBYUGF0aCBvciBDU1Mgc2VsZWN0b3IgYW5kIGludGVyYWN0IHdpdGggaXQgdXNpbmcgYSBwYXlsb2FkLiIiIgogICAgdHJ5OgogICAgICAgICMgVXNlIGV4cGxpY2l0IHdhaXQgdG8gZW5zdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQKICAgICAgICBpbnB1dF9lbGVtZW50ID0gV2ViRHJpdmVyV2FpdChkcml2ZXIsIDIwKS51bnRpbCgKICAgICAgICAgICAgRUMucHJlc2VuY2Vfb2ZfZWxlbWVudF9sb2NhdGVkKChCeS5YUEFUSCwgeHBhdGgpKQogICAgICAgICkKICAgIGV4Y2VwdCBUaW1lb3V0RXhjZXB0aW9uOgogICAgICAgIGxvZ2dlci53YXJuaW5nKGYiRWxlbWVudCB3aXRoIFhQYXRoIHt4cGF0aH0gbm90IGZvdW5kLCB0cnlpbmcgQ1NTIHNlbGVjdG9yLiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbnB1dF9lbGVtZW50ID0gV2ViRHJpdmVyV2FpdChkcml2ZXIsIDIwKS51bnRpbCgKICAgICAgICAgICAgICAgIEVDLnByZXNlbmNlX29mX2VsZW1lbnRfbG9jYXRlZCgoQnkuQ1NTX1NFTEVDVE9SLCBjc3Nfc2VsZWN0b3IpKQogICAgICAgICAgICApCiAgICAgICAgZXhjZXB0IFRpbWVvdXRFeGNlcHRpb246CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVsZW1lbnQgd2l0aCBDU1Mgc2VsZWN0b3Ige2Nzc19zZWxlY3Rvcn0gbm90IGZvdW5kLiIpCiAgICAgICAgICAgIHJldHVybgoKICAgICMgU2Nyb2xsIGludG8gdmlldyBhbmQgaW50ZXJhY3Qgd2l0aCB0aGUgZWxlbWVudAogICAgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGlucHV0X2VsZW1lbnQpCiAgICB0cnk6CiAgICAgICAgaW5wdXRfZWxlbWVudC5jbGVhcigpCiAgICAgICAgaW5wdXRfZWxlbWVudC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICBsb2dnZXIuaW5mbyhmIlN1Y2Nlc3NmdWxseSBpbnRlcmFjdGVkIHdpdGggZWxlbWVudCB1c2luZyBwYXlsb2FkOiB7cGF5bG9hZH0iKQogICAgZXhjZXB0IFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGludGVyYWN0aW5nIHdpdGggZWxlbWVudDoge2V9IikK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADpFgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAihoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAACKGgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAALh0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABGHQAAaW1wb3J0IGxvZ2dpbmcKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeQpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5jb21tb24ua2V5cyBpbXBvcnQgS2V5cwpmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5zdXBwb3J0LnVpIGltcG9ydCBXZWJEcml2ZXJXYWl0CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQgaW1wb3J0IGV4cGVjdGVkX2NvbmRpdGlvbnMgYXMgRUMKZnJvbSBzZWxlbml1bS5jb21tb24uZXhjZXB0aW9ucyBpbXBvcnQgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uLCBUaW1lb3V0RXhjZXB0aW9uCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNvbW1vbi5hY2Nlc3NpYmlsaXR5IGltcG9ydCBBY2Nlc3NpYmlsaXR5CmltcG9ydCByYW5kb20KaW1wb3J0IHN0cmluZwpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdAppbXBvcnQgdGltZQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKZGVmIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyLCBlbGVtZW50OiBXZWJFbGVtZW50KSAtPiBOb25lOgogICAgIiIiU2Nyb2xsIHRoZSBlbGVtZW50IGludG8gdmlldy4iIiIKICAgIGRyaXZlci5leGVjdXRlX3NjcmlwdCgiYXJndW1lbnRzWzBdLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ2NlbnRlcicgfSk7IiwgZWxlbWVudCkKCgpkZWYgZ2V0X3hwYXRoKGVsZW1lbnQ6IFdlYkVsZW1lbnQpIC0+IHN0cjoKICAgICIiIkdldCB0aGUgWFBhdGggb2YgYSBXZWJFbGVtZW50IGJ5IHRyYXZlcnNpbmcgdGhlIERPTS4iIiIKICAgIGNvbXBvbmVudHMgPSBbXQogICAgY2hpbGQgPSBlbGVtZW50CiAgICB3aGlsZSBjaGlsZCBpcyBub3QgTm9uZToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgR2V0IHRoZSBwYXJlbnQgZWxlbWVudCBvZiB0aGUgY3VycmVudCBub2RlCiAgICAgICAgICAgIHBhcmVudCA9IGNoaWxkLmZpbmRfZWxlbWVudChCeS5YUEFUSCwgIi4uIikKCiAgICAgICAgICAgICMgRW5zdXJlIHRoZSBwYXJlbnQgaXMgbm90IHRoZSBkb2N1bWVudCByb290IG9yIGFuIGludmFsaWQgZWxlbWVudAogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShwYXJlbnQsIFdlYkVsZW1lbnQpOgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgICMgRmluZCBzaWJsaW5ncyB3aXRoIHRoZSBzYW1lIHRhZyBuYW1lIHRvIGRldGVybWluZSB0aGUgaW5kZXgKICAgICAgICAgICAgc2libGluZ3MgPSBwYXJlbnQuZmluZF9lbGVtZW50cyhCeS5YUEFUSCwgY2hpbGQudGFnX25hbWUpCgogICAgICAgICAgICBpZiBsZW4oc2libGluZ3MpID4gMToKICAgICAgICAgICAgICAgIGluZGV4ID0gMQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHNpYmxpbmdzKSk6CiAgICAgICAgICAgICAgICAgICAgaWYgc2libGluZ3NbaV0gPT0gY2hpbGQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuYXBwZW5kKGYne2NoaWxkLnRhZ19uYW1lfVt7aW5kZXh9XScpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb21wb25lbnRzLmFwcGVuZChjaGlsZC50YWdfbmFtZSkKCiAgICAgICAgICAgICMgTW92ZSB1cCB0byB0aGUgcGFyZW50IGZvciB0aGUgbmV4dCBpdGVyYXRpb24KICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQKCiAgICAgICAgZXhjZXB0IChOb1N1Y2hFbGVtZW50RXhjZXB0aW9uLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFeGNlcHRpb24pIGFzIGU6CiAgICAgICAgICAgICMgSWYgd2UgZW5jb3VudGVyIGFuIGVycm9yIGdldHRpbmcgdGhlIHBhcmVudCwgYnJlYWsgdGhlIGxvb3AKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJFbmNvdW50ZXJlZCBleGNlcHRpb24gd2hpbGUgZ2V0dGluZyBwYXJlbnQ6IHtlfSIpCiAgICAgICAgICAgIGJyZWFrCgogICAgY29tcG9uZW50cy5yZXZlcnNlKCkKICAgIHJldHVybiAnLycgKyAnLycuam9pbihjb21wb25lbnRzKQoKCmRlZiBnZW5lcmF0ZV9zYWZlX3BheWxvYWRzKCkgLT4gTGlzdFtzdHJdOgogICAgIiIiR2VuZXJhdGUgYSBsaXN0IG9mIHNhZmUgcGF5bG9hZHMgZm9yIGZ1enppbmcuIiIiCiAgICBwYXlsb2FkcyA9IFtdCgogICAgIyBTaG9ydCByYW5kb20gc3RyaW5ncwogICAgZm9yIF8gaW4gcmFuZ2UoNSk6CiAgICAgICAgcGF5bG9hZHMuYXBwZW5kKCcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzLCBrPTEwKSkpCgogICAgIyBMb25nIHN0cmluZ3MgdG8gdGVzdCBpbnB1dCBsaW1pdHMKICAgIHBheWxvYWRzLmFwcGVuZCgnQScgKiAyNTYpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ0InICogMTAyNCkKCiAgICAjIFN0cmluZ3Mgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMKICAgIHNwZWNpYWxfY2hhcnMgPSAiIUAjJCVeJiooKV8rLT1bXXt9fDs6JywuPD4vPyIKICAgIHBheWxvYWRzLmFwcGVuZChzcGVjaWFsX2NoYXJzKQoKICAgICMgVW5pY29kZSBjaGFyYWN0ZXJzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ+a1i+ivleS4reaWh+Wtl+espicpICAjIENoaW5lc2UgY2hhcmFjdGVycwogICAgcGF5bG9hZHMuYXBwZW5kKCfwn5iD8J+RjfCfj7vwn5SlJykgICAgICAjIEVtb2ppcwoKICAgICMgTnVtZXJpYyBpbnB1dHMKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzNDU2Nzg5MCcpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJy05OTk5OTk5OTknKQoKICAgICMgRW1wdHkgc3RyaW5nCiAgICBwYXlsb2Fkcy5hcHBlbmQoJycpCgogICAgIyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMKICAgIHBheWxvYWRzLmFwcGVuZCgnICAgJykgICMgU3BhY2VzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ1x0XG4nKSAgIyBUYWIgYW5kIG5ld2xpbmUKCiAgICAjIEVtYWlscwogICAgcGF5bG9hZHMuYXBwZW5kKCd0ZXN0QGV4YW1wbGUuY29tJykKICAgIHBheWxvYWRzLmFwcGVuZCgndXNlci5uYW1lK3RhZytzb3J0aW5nQGV4YW1wbGUuY29tJykKCiAgICAjIFNRTCBpbmplY3Rpb24gYXR0ZW1wdHMgKHNhZmUsIG5vdCBoYXJtZnVsKQogICAgcGF5bG9hZHMuYXBwZW5kKCInIE9SICcxJz0nMSIpCiAgICBwYXlsb2Fkcy5hcHBlbmQoIic7IERST1AgVEFCTEUgdXNlcnM7IC0tIikKCiAgICAjIEhUTUwgdGFncyB0byB0ZXN0IFhTUyBhbmQgcmVuZGVyaW5nIGlzc3VlcwogICAgcGF5bG9hZHMuYXBwZW5kKCc8c2NyaXB0PmFsZXJ0KCJYU1MiKTwvc2NyaXB0PicpCiAgICBwYXlsb2Fkcy5hcHBlbmQoJzxkaXY+PHA+VGVzdDwvcD48L2Rpdj4nKQoKICAgICMgVHlwaWNhbCBjb3Jwb3JhdGUgaW5wdXRzCiAgICBwYXlsb2Fkcy5hcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS5jb20nKSAgIyBVUkwKICAgIHBheWxvYWRzLmFwcGVuZCgnMTIzIE1haW4gU3QuLCBTcHJpbmdmaWVsZCwgVVNBJykgICMgQWRkcmVzcwogICAgcGF5bG9hZHMuYXBwZW5kKCdKb2huIERvZScpICAjIE5hbWUKICAgIHBheWxvYWRzLmFwcGVuZCgnIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAxIicpICAjIFNRTC1saWtlIGlucHV0CgogICAgcmV0dXJuIHBheWxvYWRzCgoKZGVmIHJldHJ5X29uX3N0YWxlX2VsZW1lbnQoZnVuYyk6CiAgICAiIiJEZWNvcmF0b3IgdG8gcmV0cnkgYSBmdW5jdGlvbiBpZiBhIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBpcyBlbmNvdW50ZXJlZC4iIiIKICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgbWF4X3JldHJpZXMgPSA1ICAjIEluY3JlYXNlZCByZXRyaWVzIHRvIGhhbmRsZSBkeW5hbWljIGVsZW1lbnRzIGJldHRlcgogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBleGNlcHQgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBlbmNvdW50ZXJlZC4gQXR0ZW1wdCB7YXR0ZW1wdCArIDF9IG9mIHttYXhfcmV0cmllc30uIEVycm9yOiB7ZX0iKQogICAgICAgICAgICAgICAgaWYgYXR0ZW1wdCA8IG1heF9yZXRyaWVzIC0gMToKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIk1heCByZXRyaWVzIHJlYWNoZWQuIFN0YWxlRWxlbWVudFJlZmVyZW5jZUV4Y2VwdGlvbiBjb3VsZCBub3QgYmUgcmVzb2x2ZWQ6IHtlfSIpCiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgIHJldHVybiB3cmFwcGVyCgoKQHJldHJ5X29uX3N0YWxlX2VsZW1lbnQKZGVmIGlzX2VsZW1lbnRfZGlzcGxheWVkKGVsZW1lbnQ6IFdlYkVsZW1lbnQsIGRyaXZlcikgLT4gYm9vbDoKICAgICIiIkNoZWNrIGlmIGFuIGVsZW1lbnQgaXMgZGlzcGxheWVkLCB3aXRoIHJldHJ5IGxvZ2ljIGZvciBzdGFsZSBlbGVtZW50cy4iIiIKICAgIHNjcm9sbF9pbnRvX3ZpZXcoZHJpdmVyLCBlbGVtZW50KSAgIyBTY3JvbGwgaW50byB2aWV3IGJlZm9yZSBjaGVja2luZyB2aXNpYmlsaXR5CiAgICByZXR1cm4gZWxlbWVudC5pc19kaXNwbGF5ZWQoKQoKCmRlZiBmaW5kX2FuZF9pbnRlcmFjdF93aXRoX2lucHV0KGRyaXZlciwgeHBhdGg6IHN0ciwgY3NzX3NlbGVjdG9yOiBzdHIsIHBheWxvYWQ6IHN0cikgLT4gTm9uZToKICAgICIiIkZpbmQgYW4gaW5wdXQgZWxlbWVudCBieSBYUGF0aCBvciBDU1Mgc2VsZWN0b3IgYW5kIGludGVyYWN0IHdpdGggaXQgdXNpbmcgYSBwYXlsb2FkLiIiIgogICAgbWF4X3JldHJpZXMgPSA1CiAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfcmV0cmllcyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFVzZSBleHBsaWNpdCB3YWl0IHRvIGVuc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IHVzaW5nIFhQYXRoIGZpcnN0CiAgICAgICAgICAgIGlucHV0X2VsZW1lbnQgPSBXZWJEcml2ZXJXYWl0KGRyaXZlciwgMjApLnVudGlsKAogICAgICAgICAgICAgICAgRUMucHJlc2VuY2Vfb2ZfZWxlbWVudF9sb2NhdGVkKChCeS5YUEFUSCwgeHBhdGgpKQogICAgICAgICAgICApCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiRWxlbWVudCBmb3VuZCB1c2luZyBYUGF0aDoge3hwYXRofSIpCiAgICAgICAgZXhjZXB0IFRpbWVvdXRFeGNlcHRpb246CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiRWxlbWVudCB3aXRoIFhQYXRoIHt4cGF0aH0gbm90IGZvdW5kLCB0cnlpbmcgQ1NTIHNlbGVjdG9yLiBBdHRlbXB0IHthdHRlbXB0ICsgMX0gb2Yge21heF9yZXRyaWVzfSIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQgPSBXZWJEcml2ZXJXYWl0KGRyaXZlciwgMjApLnVudGlsKAogICAgICAgICAgICAgICAgICAgIEVDLnByZXNlbmNlX29mX2VsZW1lbnRfbG9jYXRlZCgoQnkuQ1NTX1NFTEVDVE9SLCBjc3Nfc2VsZWN0b3IpKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJFbGVtZW50IGZvdW5kIHVzaW5nIENTUyBzZWxlY3Rvcjoge2Nzc19zZWxlY3Rvcn0iKQogICAgICAgICAgICBleGNlcHQgVGltZW91dEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVsZW1lbnQgd2l0aCBDU1Mgc2VsZWN0b3Ige2Nzc19zZWxlY3Rvcn0gbm90IGZvdW5kLiBBdHRlbXB0IHthdHRlbXB0ICsgMX0gb2Yge21heF9yZXRyaWVzfSIpCiAgICAgICAgICAgICAgICBpZiBhdHRlbXB0IDwgbWF4X3JldHJpZXMgLSAxOgogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJNYXggcmV0cmllcyByZWFjaGVkLiBDb3VsZCBub3QgbG9jYXRlIGVsZW1lbnQuIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgIyBTY3JvbGwgaW50byB2aWV3IGFuZCBpbnRlcmFjdCB3aXRoIHRoZSBlbGVtZW50CiAgICAgICAgc2Nyb2xsX2ludG9fdmlldyhkcml2ZXIsIGlucHV0X2VsZW1lbnQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbnB1dF9lbGVtZW50LmNsZWFyKCkKICAgICAgICAgICAgaW5wdXRfZWxlbWVudC5zZW5kX2tleXMocGF5bG9hZCkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJTdWNjZXNzZnVsbHkgaW50ZXJhY3RlZCB3aXRoIGVsZW1lbnQgdXNpbmcgcGF5bG9hZDoge3BheWxvYWR9IikKICAgICAgICAgICAgYnJlYWsKICAgICAgICBleGNlcHQgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGVuY291bnRlcmVkIGR1cmluZyBpbnRlcmFjdGlvbi4gQXR0ZW1wdCB7YXR0ZW1wdCArIDF9IG9mIHttYXhfcmV0cmllc30uIEVycm9yOiB7ZX0iKQogICAgICAgICAgICBpZiBhdHRlbXB0IDwgbWF4X3JldHJpZXMgLSAxOgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTWF4IHJldHJpZXMgcmVhY2hlZC4gU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uIGNvdWxkIG5vdCBiZSByZXNvbHZlZDoge2V9IikKICAgICAgICAgICAgICAgIHJldHVybgoKCmRlZiBmaW5kX2FjY2Vzc2libGVfZWxlbWVudHMoZHJpdmVyKSAtPiBMaXN0W1dlYkVsZW1lbnRdOgogICAgIiIiVXNlIENocm9taXVtJ3MgYWNjZXNzaWJpbGl0eSBmZWF0dXJlcyB0byBmaW5kIGlucHV0IGZpZWxkcyBhbmQgYnV0dG9ucy4iIiIKICAgIGFjY2Vzc2libGVfZWxlbWVudHMgPSBbXQogICAgdHJ5OgogICAgICAgIGFjY2Vzc2liaWxpdHkgPSBBY2Nlc3NpYmlsaXR5KGRyaXZlcikKICAgICAgICBub2RlcyA9IGFjY2Vzc2liaWxpdHkuZ2V0X2Z1bGxfYXhfdHJlZSgpCiAgICAgICAgZm9yIG5vZGUgaW4gbm9kZXM6CiAgICAgICAgICAgIGlmIG5vZGVbJ3JvbGUnXSBpbiBbJ3RleHRGaWVsZCcsICdidXR0b24nXToKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkcml2ZXIuZXhlY3V0ZV9zY3JpcHQoJ3JldHVybiBhcmd1bWVudHNbMF07Jywgbm9kZSkKICAgICAgICAgICAgICAgIGFjY2Vzc2libGVfZWxlbWVudHMuYXBwZW5kKGVsZW1lbnQpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgZmluZGluZyBhY2Nlc3NpYmxlIGVsZW1lbnRzOiB7ZX0iKQogICAgcmV0dXJuIGFjY2Vzc2libGVfZWxlbWVudHMK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAuHQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA9RwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAA9RwAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA6gwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "selenium_fuzzer/exceptions.py",
			"settings":
			{
				"buffer_size": 361,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAaQEAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "selenium_fuzzer/fuzzer.py",
			"settings":
			{
				"buffer_size": 2896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA+iwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAD6LAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAqC0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAqC0AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAARS4AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANYCAAAAAAAA1wIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAgAAAAAAANYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"",
					null,
					"AgAAANcCAAAAAAAA1wIAAAAAAAAAAAAA1gIAAAAAAAD/AgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAADWAgAAAAAAANYCAAAAAAAAAAAAAAAA8L/XAgAAAAAAANcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"",
					null,
					"AgAAAMcCAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwAAAAAAADgAAABpbXBvcnQgYXJncGFyc2Vmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AgAAAAAAAMcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAHAuAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA9S8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAPUvAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAALYxAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAD0wAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAWhMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABaEwAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QKZnJvbSBzZWxlbml1bS5jb21tb24uZXhjZXB0aW9ucyBpbXBvcnQgVGltZW91dEV4Y2VwdGlvbiwgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgRWxlbWVudE5vdEludGVyYWN0YWJsZUV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNvbW1vbi5ieSBpbXBvcnQgQnkKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmtleXMgaW1wb3J0IEtleXMKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIucmVtb3RlLndlYmVsZW1lbnQgaW1wb3J0IFdlYkVsZW1lbnQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydC51aSBpbXBvcnQgV2ViRHJpdmVyV2FpdApmcm9tIHNlbGVuaXVtLndlYmRyaXZlci5zdXBwb3J0IGltcG9ydCBleHBlY3RlZF9jb25kaXRpb25zIGFzIEVDCmZyb20gc2VsZW5pdW1fZnV6emVyLnNlbGVuaXVtX2RyaXZlciBpbXBvcnQgY3JlYXRlX2RyaXZlcgpmcm9tIHNlbGVuaXVtX2Z1enplci51dGlscyBpbXBvcnQgZ2VuZXJhdGVfc2FmZV9wYXlsb2Fkcywgc2Nyb2xsX2ludG9fdmlldwpmcm9tIHNlbGVuaXVtX2Z1enplci5sb2dnZXIgaW1wb3J0IGdldF9sb2dnZXIKZnJvbSBzZWxlbml1bV9mdXp6ZXIuZXhjZXB0aW9ucyBpbXBvcnQgRWxlbWVudE5vdEZvdW5kRXJyb3IsIEVsZW1lbnROb3RJbnRlcmFjdGFibGVFcnJvcgpmcm9tIHNlbGVuaXVtX2Z1enplci5jb25maWcgaW1wb3J0IENvbmZpZwppbXBvcnQgYXJncGFyc2UKZnJvbSBzZWxlbml1bV9mdXp6ZXIudW5oaWRlciBpbXBvcnQgVW5oaWRlcgpmcm9tIHNlbGVuaXVtX2Z1enplci5pbnB1dF9kZXRlY3RvciBpbXBvcnQgSW5wdXREZXRlY3Rvcgpmcm9tIHNlbGVuaXVtX2Z1enplci5jbGlja19hbmFseXplciBpbXBvcnQgQ2xpY2tBbmFseXplcgoKbG9nZ2VyID0gZ2V0X2xvZ2dlcihfX25hbWVfXykKCmNsYXNzIEZ1enplcjoKICAgICIiIk1haW4gY2xhc3MgZm9yIHRoZSBzZWxlbml1bSBmdXp6ZXIuIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVybDogc3RyLCBoZWFkbGVzczogYm9vbCA9IEZhbHNlKToKICAgICAgICBzZWxmLnVybCA9IHVybAogICAgICAgIHNlbGYuZHJpdmVyID0gY3JlYXRlX2RyaXZlcihoZWFkbGVzcz1oZWFkbGVzcykKICAgICAgICBzZWxmLnVuaGlkZXIgPSBVbmhpZGVyKHNlbGYuZHJpdmVyKQogICAgICAgIHNlbGYuaW5wdXRfZGV0ZWN0b3IgPSBJbnB1dERldGVjdG9yKHNlbGYuZHJpdmVyKQogICAgICAgIHNlbGYuY2xpY2tfYW5hbHl6ZXIgPSBDbGlja0FuYWx5emVyKHNlbGYuZHJpdmVyKQoKICAgIGRlZiBmdXp6X2ZpZWxkKHNlbGYsIGlucHV0X2VsZW1lbnQ6IFdlYkVsZW1lbnQsIGlucHV0X25hbWU6IHN0ciwgZGVsYXk6IGludCkgLT4gTm9uZToKICAgICAgICAiIiJGdXp6IGEgc2luZ2xlIGlucHV0IGZpZWxkLiIiIgogICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCgogICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgaW5wdXRfZWxlbWVudC5pc19kaXNwbGF5ZWQoKToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkZpZWxkIHtpbnB1dF9uYW1lfSBpcyBub3QgZGlzcGxheWVkLiBBdHRlbXB0aW5nIHRvIHVuaGlkZSBpdC4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYudW5oaWRlci51bmhpZGVfZmllbGQoaW5wdXRfZWxlbWVudCkKICAgICAgICAgICAgICAgICAgICBXZWJEcml2ZXJXYWl0KHNlbGYuZHJpdmVyLCAyMCkudW50aWwoRUMudmlzaWJpbGl0eV9vZihpbnB1dF9lbGVtZW50KSkKCiAgICAgICAgICAgICAgICBzY3JvbGxfaW50b192aWV3KHNlbGYuZHJpdmVyLCBpbnB1dF9lbGVtZW50KQogICAgICAgICAgICAgICAgV2ViRHJpdmVyV2FpdChzZWxmLmRyaXZlciwgMjApLnVudGlsKEVDLmVsZW1lbnRfdG9fYmVfY2xpY2thYmxlKChCeS5YUEFUSCwgc2VsZi5nZXRfeHBhdGgoaW5wdXRfZWxlbWVudCkpKSkKCiAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50LmNsZWFyKCkKICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKHBheWxvYWQpCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkZ1enppbmcgRmllbGQ6IHtpbnB1dF9uYW1lfSwgUGF5bG9hZDoge3BheWxvYWR9IikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoZGVsYXkpCgogICAgICAgICAgICAgICAgIyBUcmlnZ2VyIGV2ZW50cwogICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudC5zZW5kX2tleXMoS2V5cy5UQUIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuNSkKCiAgICAgICAgICAgICAgICBzZWxmLmRyaXZlci5leGVjdXRlX3NjcmlwdCgKICAgICAgICAgICAgICAgICAgICAiYXJndW1lbnRzWzBdLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7IiwKICAgICAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBzZWxmLmRyaXZlci5leGVjdXRlX3NjcmlwdCgKICAgICAgICAgICAgICAgICAgICAiYXJndW1lbnRzWzBdLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpOyIsCiAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgwLjUpCgogICAgICAgICAgICAgICAgIyBBbmFseXplIHJlc3BvbnNlCiAgICAgICAgICAgICAgICBzZWxmLmNsaWNrX2FuYWx5emVyLmFuYWx5emVfcmVzcG9uc2UoKQoKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgZnV6emluZyB3aXRoIHBheWxvYWQgJ3twYXlsb2FkfSc6IHtlfSIpCiAgICAgICAgICAgICAgICBzZWxmLmRyaXZlci5zYXZlX3NjcmVlbnNob3QoZiJlcnJvcl97aW5wdXRfbmFtZX0ucG5nIikKCiAgICBkZWYgcnVuX2Z1enpfZmllbGRzKHNlbGYsIGRlbGF5OiBpbnQgPSAxKSAtPiBOb25lOgogICAgICAgICIiIlJ1biB0aGUgZnV6emVyIGZvciBpbnB1dCBmaWVsZHMuIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbnB1dHMgPSBzZWxmLmlucHV0X2RldGVjdG9yLmRldGVjdF9pbnB1dHMoc2VsZi51cmwpCiAgICAgICAgICAgIGlmIGlucHV0czoKICAgICAgICAgICAgICAgICMgTGlzdCBhdmFpbGFibGUgaW5wdXQgZmllbGRzCiAgICAgICAgICAgICAgICBzZWxmLmlucHV0X2RldGVjdG9yLmxpc3RfaW5wdXRzKGlucHV0cykKICAgICAgICAgICAgICAgICMgUHJvbXB0IHVzZXIgdG8gc2VsZWN0IGlucHV0CiAgICAgICAgICAgICAgICBzZWxlY3RlZF9mb3JtLCBzZWxlY3RlZF9maWVsZCA9IHNlbGYuaW5wdXRfZGV0ZWN0b3Iuc2VsZWN0X2lucHV0KGlucHV0cykKICAgICAgICAgICAgICAgIGZvcm1faW5mbyA9IGlucHV0c1tzZWxlY3RlZF9mb3JtXQogICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudCA9IGZvcm1faW5mb1snaW5wdXRzJ11bc2VsZWN0ZWRfZmllbGRdCiAgICAgICAgICAgICAgICBpbnB1dF9uYW1lID0gaW5wdXRfZWxlbWVudC5nZXRfYXR0cmlidXRlKCdpZCcpIG9yIGlucHV0X2VsZW1lbnQuZ2V0X2F0dHJpYnV0ZSgnbmFtZScpIG9yICdVbm5hbWVkJwogICAgICAgICAgICAgICAgc2VsZi5mdXp6X2ZpZWxkKGlucHV0X2VsZW1lbnQsIGlucHV0X25hbWUsIGRlbGF5KQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHNlbGYuZHJpdmVyLnF1aXQoKQoKICAgIGRlZiBydW5fY2xpY2tfZWxlbWVudHMoc2VsZiwgZGVsYXk6IGludCA9IDEpIC0+IE5vbmU6CiAgICAgICAgIiIiUnVuIHRoZSBmdXp6ZXIgdG8gY2xpY2sgdGhyb3VnaCBjbGlja2FibGUgZWxlbWVudHMuIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjbGlja2FibGVfZWxlbWVudHMgPSBzZWxmLmlucHV0X2RldGVjdG9yLmRldGVjdF9jbGlja2FibGVfZWxlbWVudHMoKQogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiBjbGlja2FibGVfZWxlbWVudHM6CiAgICAgICAgICAgICAgICBzZWxmLmNsaWNrX2FuYWx5emVyLmNsaWNrX2VsZW1lbnQoZWxlbWVudCkKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoZGVsYXkpCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5kcml2ZXIucXVpdCgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlNlbGVuaXVtIEZ1enplciBTY3JpcHQiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgidXJsIiwgaGVscD0iVVJMIHRvIGZ1enoiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1mdXp6LWZpZWxkcyIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IkZ1enogaW5wdXQgZmllbGRzIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tY2xpY2stZWxlbWVudHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJDbGljayB0aHJvdWdoIGNsaWNrYWJsZSBlbGVtZW50cyIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWRlbGF5IiwgdHlwZT1pbnQsIGRlZmF1bHQ9MSwgaGVscD0iRGVsYXkgYmV0d2VlbiBhY3Rpb25zIGluIHNlY29uZHMiKQoKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgogICAgZnV6emVyID0gRnV6emVyKGFyZ3MudXJsLCBoZWFkbGVzcz1Db25maWcuU0VMRU5JVU1fSEVBRExFU1MpCgogICAgaWYgYXJncy5mdXp6X2ZpZWxkczoKICAgICAgICBmdXp6ZXIucnVuX2Z1enpfZmllbGRzKGRlbGF5PWFyZ3MuZGVsYXkpCgogICAgaWYgYXJncy5jbGlja19lbGVtZW50czoKICAgICAgICBmdXp6ZXIucnVuX2NsaWNrX2VsZW1lbnRzKGRlbGF5PWFyZ3MuZGVsYXkpCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAABaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAVBMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMkAAAAAAAAAygAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"",
					null,
					"AgAAAMoAAAAAAAAAFwEAAAAAAAAAAAAAyQAAAAAAAAAWAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/ygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					3,
					"left_delete",
					null,
					"AwAAAM8AAAAAAAAAzwAAAAAAAABHAAAAZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeSAgIyBBZGQgdGhpcyBsaW5lIHRvIGZpeCB0aGUgaXNzdWXOAAAAAAAAAM4AAAAAAAAAAQAAAHPNAAAAAAAAAM0AAAAAAAAAAQAAACA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzwAAAAAAAAAWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					4,
					"left_delete",
					null,
					"BAAAAMwAAAAAAAAAzAAAAAAAAAABAAAAbcsAAAAAAAAAywAAAAAAAAABAAAAb8oAAAAAAAAAygAAAAAAAAABAAAAcskAAAAAAAAAyQAAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzQAAAAAAAADNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAABgBAAAAAAAAGAEAAAAAAAArAAAAZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuY29tbW9uLmJ5IGltcG9ydCBCeRcBAAAAAAAAFwEAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwEAAAAAAAAYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAB2EwAAaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QKZnJvbSBzZWxlbml1bS5jb21tb24uZXhjZXB0aW9ucyBpbXBvcnQgVGltZW91dEV4Y2VwdGlvbiwgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiwgRWxlbWVudE5vdEludGVyYWN0YWJsZUV4Y2VwdGlvbiwgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXhjZXB0aW9uCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNvbW1vbi5ieSBpbXBvcnQgQnkgICMgQWRkIHRoaXMgbGluZSB0byBmaXggdGhlIGlzc3VlCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLmNvbW1vbi5rZXlzIGltcG9ydCBLZXlzCmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnJlbW90ZS53ZWJlbGVtZW50IGltcG9ydCBXZWJFbGVtZW50CmZyb20gc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQudWkgaW1wb3J0IFdlYkRyaXZlcldhaXQKZnJvbSBzZWxlbml1bS53ZWJkcml2ZXIuc3VwcG9ydCBpbXBvcnQgZXhwZWN0ZWRfY29uZGl0aW9ucyBhcyBFQwpmcm9tIHNlbGVuaXVtX2Z1enplci5zZWxlbml1bV9kcml2ZXIgaW1wb3J0IGNyZWF0ZV9kcml2ZXIKZnJvbSBzZWxlbml1bV9mdXp6ZXIudXRpbHMgaW1wb3J0IGdlbmVyYXRlX3NhZmVfcGF5bG9hZHMsIHNjcm9sbF9pbnRvX3ZpZXcsIGdldF94cGF0aApmcm9tIHNlbGVuaXVtX2Z1enplci5sb2dnZXIgaW1wb3J0IGdldF9sb2dnZXIKZnJvbSBzZWxlbml1bV9mdXp6ZXIuZXhjZXB0aW9ucyBpbXBvcnQgRWxlbWVudE5vdEZvdW5kRXJyb3IsIEVsZW1lbnROb3RJbnRlcmFjdGFibGVFcnJvcgpmcm9tIHNlbGVuaXVtX2Z1enplci51bmhpZGVyIGltcG9ydCBVbmhpZGVyCmZyb20gc2VsZW5pdW1fZnV6emVyLmlucHV0X2RldGVjdG9yIGltcG9ydCBJbnB1dERldGVjdG9yCmZyb20gc2VsZW5pdW1fZnV6emVyLmNsaWNrX2FuYWx5emVyIGltcG9ydCBDbGlja0FuYWx5emVyCmltcG9ydCBhcmdwYXJzZQoKbG9nZ2VyID0gZ2V0X2xvZ2dlcihfX25hbWVfXykKCmNsYXNzIEZ1enplcjoKICAgICIiIk1haW4gY2xhc3MgZm9yIHRoZSBzZWxlbml1bSBmdXp6ZXIuIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVybDogc3RyLCBoZWFkbGVzczogYm9vbCA9IEZhbHNlKToKICAgICAgICBzZWxmLnVybCA9IHVybAogICAgICAgIHNlbGYuZHJpdmVyID0gY3JlYXRlX2RyaXZlcihoZWFkbGVzcz1oZWFkbGVzcykKICAgICAgICBzZWxmLnVuaGlkZXIgPSBVbmhpZGVyKHNlbGYuZHJpdmVyKQogICAgICAgIHNlbGYuaW5wdXRfZGV0ZWN0b3IgPSBJbnB1dERldGVjdG9yKHNlbGYuZHJpdmVyKQogICAgICAgIHNlbGYuY2xpY2tfYW5hbHl6ZXIgPSBDbGlja0FuYWx5emVyKHNlbGYuZHJpdmVyKQoKICAgIGRlZiBmdXp6X2ZpZWxkKHNlbGYsIGlucHV0X2VsZW1lbnQ6IFdlYkVsZW1lbnQsIGlucHV0X25hbWU6IHN0ciwgZGVsYXk6IGludCkgLT4gTm9uZToKICAgICAgICAiIiJGdXp6IGEgc2luZ2xlIGlucHV0IGZpZWxkLiIiIgogICAgICAgIHBheWxvYWRzID0gZ2VuZXJhdGVfc2FmZV9wYXlsb2FkcygpCgogICAgICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgaW5wdXRfZWxlbWVudC5pc19kaXNwbGF5ZWQoKToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkZpZWxkIHtpbnB1dF9uYW1lfSBpcyBub3QgZGlzcGxheWVkLiBBdHRlbXB0aW5nIHRvIHVuaGlkZSBpdC4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYudW5oaWRlci51bmhpZGVfZmllbGQoaW5wdXRfZWxlbWVudCkKICAgICAgICAgICAgICAgICAgICBXZWJEcml2ZXJXYWl0KHNlbGYuZHJpdmVyLCAyMCkudW50aWwoRUMudmlzaWJpbGl0eV9vZihpbnB1dF9lbGVtZW50KSkKCiAgICAgICAgICAgICAgICBzY3JvbGxfaW50b192aWV3KHNlbGYuZHJpdmVyLCBpbnB1dF9lbGVtZW50KQogICAgICAgICAgICAgICAgeHBhdGggPSBnZXRfeHBhdGgoaW5wdXRfZWxlbWVudCkKICAgICAgICAgICAgICAgIFdlYkRyaXZlcldhaXQoc2VsZi5kcml2ZXIsIDIwKS51bnRpbChFQy5lbGVtZW50X3RvX2JlX2NsaWNrYWJsZSgoQnkuWFBBVEgsIHhwYXRoKSkpCgogICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudC5jbGVhcigpCiAgICAgICAgICAgICAgICBpbnB1dF9lbGVtZW50LnNlbmRfa2V5cyhwYXlsb2FkKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJGdXp6aW5nIEZpZWxkOiB7aW5wdXRfbmFtZX0sIFBheWxvYWQ6IHtwYXlsb2FkfSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQoKICAgICAgICAgICAgICAgICMgVHJpZ2dlciBldmVudHMKICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQuc2VuZF9rZXlzKEtleXMuVEFCKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgwLjUpCgogICAgICAgICAgICAgICAgc2VsZi5kcml2ZXIuZXhlY3V0ZV9zY3JpcHQoCiAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50c1swXS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpOyIsCiAgICAgICAgICAgICAgICAgICAgaW5wdXRfZWxlbWVudAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgc2VsZi5kcml2ZXIuZXhlY3V0ZV9zY3JpcHQoCiAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50c1swXS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTsiLAogICAgICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKICAgICAgICAgICAgICAgICMgQW5hbHl6ZSByZXNwb25zZQogICAgICAgICAgICAgICAgc2VsZi5jbGlja19hbmFseXplci5hbmFseXplX3Jlc3BvbnNlKCkKCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIGZ1enppbmcgd2l0aCBwYXlsb2FkICd7cGF5bG9hZH0nOiB7ZX0iKQogICAgICAgICAgICAgICAgc2VsZi5kcml2ZXIuc2F2ZV9zY3JlZW5zaG90KGYiZXJyb3Jfe2lucHV0X25hbWV9LnBuZyIpCgogICAgZGVmIHJ1bl9mdXp6X2ZpZWxkcyhzZWxmLCBkZWxheTogaW50ID0gMSkgLT4gTm9uZToKICAgICAgICAiIiJSdW4gdGhlIGZ1enplciBmb3IgaW5wdXQgZmllbGRzLiIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaW5wdXRzID0gc2VsZi5pbnB1dF9kZXRlY3Rvci5kZXRlY3RfaW5wdXRzKHNlbGYudXJsKQogICAgICAgICAgICBpZiBpbnB1dHM6CiAgICAgICAgICAgICAgICAjIExpc3QgYXZhaWxhYmxlIGlucHV0IGZpZWxkcwogICAgICAgICAgICAgICAgc2VsZi5pbnB1dF9kZXRlY3Rvci5saXN0X2lucHV0cyhpbnB1dHMpCiAgICAgICAgICAgICAgICAjIFByb21wdCB1c2VyIHRvIHNlbGVjdCBpbnB1dAogICAgICAgICAgICAgICAgc2VsZWN0ZWRfZm9ybSwgc2VsZWN0ZWRfZmllbGQgPSBzZWxmLmlucHV0X2RldGVjdG9yLnNlbGVjdF9pbnB1dChpbnB1dHMpCiAgICAgICAgICAgICAgICBmb3JtX2luZm8gPSBpbnB1dHNbc2VsZWN0ZWRfZm9ybV0KICAgICAgICAgICAgICAgIGlucHV0X2VsZW1lbnQgPSBmb3JtX2luZm9bJ2lucHV0cyddW3NlbGVjdGVkX2ZpZWxkXQogICAgICAgICAgICAgICAgaW5wdXRfbmFtZSA9IGlucHV0X2VsZW1lbnQuZ2V0X2F0dHJpYnV0ZSgnaWQnKSBvciBpbnB1dF9lbGVtZW50LmdldF9hdHRyaWJ1dGUoJ25hbWUnKSBvciAnVW5uYW1lZCcKICAgICAgICAgICAgICAgIHNlbGYuZnV6el9maWVsZChpbnB1dF9lbGVtZW50LCBpbnB1dF9uYW1lLCBkZWxheSkKICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICBzZWxmLmRyaXZlci5xdWl0KCkKCiAgICBkZWYgcnVuX2NsaWNrX2VsZW1lbnRzKHNlbGYsIGRlbGF5OiBpbnQgPSAxKSAtPiBOb25lOgogICAgICAgICIiIlJ1biB0aGUgZnV6emVyIHRvIGNsaWNrIHRocm91Z2ggY2xpY2thYmxlIGVsZW1lbnRzLiIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpY2thYmxlX2VsZW1lbnRzID0gc2VsZi5pbnB1dF9kZXRlY3Rvci5kZXRlY3RfY2xpY2thYmxlX2VsZW1lbnRzKCkKICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gY2xpY2thYmxlX2VsZW1lbnRzOgogICAgICAgICAgICAgICAgc2VsZi5jbGlja19hbmFseXplci5jbGlja19lbGVtZW50KGVsZW1lbnQpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHNlbGYuZHJpdmVyLnF1aXQoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJTZWxlbml1bSBGdXp6ZXIgU2NyaXB0IikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoInVybCIsIGhlbHA9IlVSTCB0byBmdXp6IikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0tZnV6ei1maWVsZHMiLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJGdXp6IGlucHV0IGZpZWxkcyIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWNsaWNrLWVsZW1lbnRzIiwgYWN0aW9uPSJzdG9yZV90cnVlIiwgaGVscD0iQ2xpY2sgdGhyb3VnaCBjbGlja2FibGUgZWxlbWVudHMiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1kZWxheSIsIHR5cGU9aW50LCBkZWZhdWx0PTEsIGhlbHA9IkRlbGF5IGJldHdlZW4gYWN0aW9ucyBpbiBzZWNvbmRzIikKCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGZ1enplciA9IEZ1enplcihhcmdzLnVybCwgaGVhZGxlc3M9Q29uZmlnLlNFTEVOSVVNX0hFQURMRVNTKQoKICAgIGlmIGFyZ3MuZnV6el9maWVsZHM6CiAgICAgICAgZnV6emVyLnJ1bl9mdXp6X2ZpZWxkcyhkZWxheT1hcmdzLmRlbGF5KQoKICAgIGlmIGFyZ3MuY2xpY2tfZWxlbWVudHM6CiAgICAgICAgZnV6emVyLnJ1bl9jbGlja19lbGVtZW50cyhkZWxheT1hcmdzLmRlbGF5KQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAdhMAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAUAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 315,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n#s"
					},
					"AwAAAAIBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAAUBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "uble"
					},
					"BAAAAAUBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " project"
					},
					"CAAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAALAQAAAAAAAAwBAAAAAAAAAAAAAAwBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA8BAAAAAAAAAAAAAA8BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAARAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACQEAAAAAAAAJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " files"
					},
					"BgAAABEBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAATAQAAAAAAAAAAAAATAQAAAAAAABQBAAAAAAAAAAAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAAWAQAAAAAAABcBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABcBAAAAAAAAGAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"",
					null,
					"AQAAABgBAAAAAAAAJwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAEAAAAAAAAYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABgBAAAAAAAAGQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAEAAAAAAAAYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACgBAAAAAAAAKQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAEAAAAAAAAoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"",
					null,
					"AQAAACkBAAAAAAAAOwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "selenium_fuzzer/unhider.py",
			"settings":
			{
				"buffer_size": 2536,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA6AkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "selenium_fuzzer/input_detector.py",
			"settings":
			{
				"buffer_size": 4024,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAbQ8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"",
					null,
					"AQAAAPAAAAAAAAAAOgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "selenium_fuzzer/click_analyzer.py",
			"settings":
			{
				"buffer_size": 2021,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAA5QcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: __magic__"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 124.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/jazzer/Work/selenium_fuzzer/tests/test_fuzzer.py",
		"/home/jazzer/Work/patches/readme-clickable-elements.patch",
		"/home/jazzer/Work/selenium_fuzzer/selenium_fuzzer.sublime-project",
		"/home/jazzer/Work/patches/fuzzer-class-clickable-elements.patch",
		"/home/jazzer/Work/selenium_fuzzer/.gitignore",
		"/home/jazzer/wifi/gps_to_kml.py",
		"/home/jazzer/Work/fuzzer-test1.py",
		"/home/jazzer/tryhackme/expose/backdoor.jpg",
		"/home/jazzer/tryhackme/christmasctf/christmas.sql",
		"/home/jazzer/wifi/current_location_link.kml",
		"/home/jazzer/Work/fuzzer-advanced-1.py",
		"/home/jazzer/Work/fuzzer-advanced-2.py",
		"/home/jazzer/Work/fuzzer-python-linux.py",
		"/home/jazzer/Work/fuzzer-linux.py",
		"/home/jazzer/opt/gpt-scripts/server-client-test/server.c",
		"/home/jazzer/opt/gpt-scripts/linux-reverse-shell-obuscated.php",
		"/home/jazzer/opt/gpt-scripts/server-client-test/client-linux.c",
		"/home/jazzer/opt/gpt-scripts/server-client-test/http_server.py",
		"/home/jazzer/opt/gpt-scripts/server-client-test/client-windows.c",
		"/home/jazzer/opt/gpt-scripts/server-client-test/client.c",
		"/home/jazzer/opt/gpt-scripts/server-client-test/c2_client_windows.c",
		"/home/jazzer/opt/gpt-scripts/linux-reverse-shell-obuscated.sh",
		"/home/jazzer/opt/gpt-scripts/windows-reverse-cmd-obuscated.php",
		"/home/jazzer/opt/gpt-scripts/https-server.py",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted-4.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted-5.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted-9.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-reverse-shell-obuscated.2.sh",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/server-client-test/server.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/server-client-test/client.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/server-client-test/c2_client_windows.c",
		"/home/jazzer/opt/gpt-scripts/TEST/windows/windows-dropper-evasion-1.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted-3.c",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted.c",
		"/home/jazzer/opt/gpt-scripts/linux-reverse-python.py",
		"/home/jazzer/opt/gpt-scripts/windows-reverse-python.py",
		"/home/jazzer/opt/vmware-host-modules-w17.5.1/README",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/meterpreter-2.rb",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/meterpreter.rb",
		"/home/jazzer/opt/gpt-scripts/TEST/linux/linux-dropper-encrypted-2.c",
		"/home/jazzer/opt/gpt-scripts/dropper-windows-c-evasion.c",
		"/home/jazzer/opt/gpt-scripts/linux-main-shell-php.php",
		"/home/jazzer/opt/gpt-scripts/linux-main-shell-c.c",
		"/home/jazzer/opt/gpt-scripts/linux-main-shell-sh.sh",
		"/home/jazzer/opt/gpt-scripts/windows-reverse-cmd.c",
		"/home/jazzer/opt/gpt-scripts/dropper-linux-c-evasion.c",
		"/home/jazzer/opt/gpt-scripts/dropper-linux-c-evasion.2.c",
		"/home/jazzer/opt/gpt-scripts/linux/revers-php-evasion.php",
		"/home/jazzer/opt/gpt-scripts/linux-command-injection.c",
		"/home/jazzer/opt/gpt-scripts/reverse-python-linux-evade.py",
		"/home/jazzer/opt/gpt-scripts/linux-reverse-shell-evanasion-2.c",
		"/home/jazzer/opt/gpt-scripts/linux/reverse-shell-linux-poly.sh",
		"/home/jazzer/opt/gpt-scripts/windows/powershell-reverse-evasion.bat",
		"/home/jazzer/opt/gpt-scripts/reverse-shell-windows-evade.cpp",
		"/home/jazzer/opt/gpt-scripts/linux-command-injection.sh",
		"/home/jazzer/opt/gpt-scripts/revers-php-evasion.php",
		"/home/jazzer/opt/gpt-scripts/reverse-php-windows-evade.php",
		"/home/jazzer/opt/gpt-scripts/reverse-shell-linux-evade-metasploit-2",
		"/home/jazzer/opt/gpt-scripts/revershell.php",
		"/home/jazzer/opt/gpt-scripts/powershell-reverse-evasion.bat",
		"/home/jazzer/.zshrc"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"chromedriver",
			"chrome",
			"select_fields_to_fuzz()",
			"197",
			"192",
			"config",
			"inet_pton",
			"seccess"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4558,
						"regions":
						{
						},
						"selection":
						[
							[
								4558,
								4558
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 810.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "setup.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 667,
						"regions":
						{
						},
						"selection":
						[
							[
								98,
								98
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "requirements.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "from selenium_fuzzer.fuzzer import Fuzzer",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "selenium_fuzzer/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 139,
						"regions":
						{
						},
						"selection":
						[
							[
								139,
								139
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "selenium_fuzzer/config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 342,
						"regions":
						{
						},
						"selection":
						[
							[
								342,
								342
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "selenium_fuzzer/logger.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 619,
						"regions":
						{
						},
						"selection":
						[
							[
								619,
								619
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "selenium_fuzzer/selenium_driver.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 783,
						"regions":
						{
						},
						"selection":
						[
							[
								783,
								783
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "selenium_fuzzer/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3306,
						"regions":
						{
						},
						"selection":
						[
							[
								3306,
								3306
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "selenium_fuzzer/exceptions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 361,
						"regions":
						{
						},
						"selection":
						[
							[
								361,
								361
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "selenium_fuzzer/fuzzer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2896,
						"regions":
						{
						},
						"selection":
						[
							[
								2134,
								2134
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 315,
						"regions":
						{
						},
						"selection":
						[
							[
								194,
								194
							]
						],
						"settings":
						{
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "selenium_fuzzer/unhider.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2536,
						"regions":
						{
						},
						"selection":
						[
							[
								2345,
								2345
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "selenium_fuzzer/input_detector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4024,
						"regions":
						{
						},
						"selection":
						[
							[
								309,
								309
							],
							[
								314,
								314
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "selenium_fuzzer/click_analyzer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2021,
						"regions":
						{
						},
						"selection":
						[
							[
								2021,
								2021
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 132.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/C++/C Single File.sublime-build",
	"project": "selenium_fuzzer.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
